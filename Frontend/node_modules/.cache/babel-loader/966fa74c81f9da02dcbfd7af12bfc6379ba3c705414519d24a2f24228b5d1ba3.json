{"ast":null,"code":"export const createNativeMediaStreamAudioSourceNode = (nativeAudioContext, {\n  mediaStream\n}) => {\n  const audioStreamTracks = mediaStream.getAudioTracks();\n  /*\n   * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n   * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n   */\n  audioStreamTracks.sort((a, b) => a.id < b.id ? -1 : a.id > b.id ? 1 : 0);\n  const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);\n  const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n  /*\n   * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs\n   * to be overwritten as it would otherwise expose the reconstructed version.\n   */\n  Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', {\n    value: mediaStream\n  });\n  return nativeMediaStreamAudioSourceNode;\n};","map":{"version":3,"names":["createNativeMediaStreamAudioSourceNode","nativeAudioContext","mediaStream","audioStreamTracks","getAudioTracks","sort","a","b","id","filteredAudioStreamTracks","slice","nativeMediaStreamAudioSourceNode","createMediaStreamSource","MediaStream","Object","defineProperty","value"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js"],"sourcesContent":["export const createNativeMediaStreamAudioSourceNode = (nativeAudioContext, { mediaStream }) => {\n    const audioStreamTracks = mediaStream.getAudioTracks();\n    /*\n     * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n     * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n     */\n    audioStreamTracks.sort((a, b) => (a.id < b.id ? -1 : a.id > b.id ? 1 : 0));\n    const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);\n    const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n    /*\n     * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs\n     * to be overwritten as it would otherwise expose the reconstructed version.\n     */\n    Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });\n    return nativeMediaStreamAudioSourceNode;\n};\n//# sourceMappingURL=native-media-stream-audio-source-node.js.map"],"mappings":"AAAA,OAAO,MAAMA,sCAAsC,GAAGA,CAACC,kBAAkB,EAAE;EAAEC;AAAY,CAAC,KAAK;EAC3F,MAAMC,iBAAiB,GAAGD,WAAW,CAACE,cAAc,CAAC,CAAC;EACtD;AACJ;AACA;AACA;EACID,iBAAiB,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,GAAG,CAAC,CAAC,GAAGF,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,GAAG,CAAC,GAAG,CAAE,CAAC;EAC1E,MAAMC,yBAAyB,GAAGN,iBAAiB,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/D,MAAMC,gCAAgC,GAAGV,kBAAkB,CAACW,uBAAuB,CAAC,IAAIC,WAAW,CAACJ,yBAAyB,CAAC,CAAC;EAC/H;AACJ;AACA;AACA;EACIK,MAAM,CAACC,cAAc,CAACJ,gCAAgC,EAAE,aAAa,EAAE;IAAEK,KAAK,EAAEd;EAAY,CAAC,CAAC;EAC9F,OAAOS,gCAAgC;AAC3C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}