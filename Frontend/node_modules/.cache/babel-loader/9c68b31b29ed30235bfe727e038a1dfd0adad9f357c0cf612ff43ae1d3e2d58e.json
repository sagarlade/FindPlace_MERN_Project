{"ast":null,"code":"import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeStereoPannerNodes = new WeakMap();\n    const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeStereoPannerNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n      const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeStereoPannerNode.channelCount,\n          channelCountMode: nativeStereoPannerNode.channelCountMode,\n          channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n          pan: nativeStereoPannerNode.pan.value\n        };\n        nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n      }\n      if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n      }\n      return nativeStereoPannerNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isNativeAudioNodeFaker","isOwnedByContext","createStereoPannerNodeRendererFactory","connectAudioParam","createNativeStereoPannerNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeStereoPannerNodes","WeakMap","createStereoPannerNode","proxy","nativeOfflineAudioContext","nativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","pan","value","set","inputs","render","renderedNativeStereoPannerNode","get","undefined","Promise","resolve"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js"],"sourcesContent":["import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=stereo-panner-node-renderer-factory.js.map"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,mCAAmC;AAC1E,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,OAAO,MAAMC,qCAAqC,GAAGA,CAACC,iBAAiB,EAAEC,4BAA4B,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEC,uBAAuB,KAAK;EACrK,OAAO,MAAM;IACT,MAAMC,+BAA+B,GAAG,IAAIC,OAAO,CAAC,CAAC;IACrD,MAAMC,sBAAsB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,yBAAyB,KAAK;MACvE,IAAIC,sBAAsB,GAAGR,kBAAkB,CAACM,KAAK,CAAC;MACtD;AACZ;AACA;AACA;MACY,MAAMG,sCAAsC,GAAGb,gBAAgB,CAACY,sBAAsB,EAAED,yBAAyB,CAAC;MAClH,IAAI,CAACE,sCAAsC,EAAE;QACzC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,sBAAsB,CAACG,YAAY;UACjDC,gBAAgB,EAAEJ,sBAAsB,CAACI,gBAAgB;UACzDC,qBAAqB,EAAEL,sBAAsB,CAACK,qBAAqB;UACnEC,GAAG,EAAEN,sBAAsB,CAACM,GAAG,CAACC;QACpC,CAAC;QACDP,sBAAsB,GAAGT,4BAA4B,CAACQ,yBAAyB,EAAEG,OAAO,CAAC;MAC7F;MACAP,+BAA+B,CAACa,GAAG,CAACT,yBAAyB,EAAEC,sBAAsB,CAAC;MACtF,IAAI,CAACC,sCAAsC,EAAE;QACzC,MAAMR,gBAAgB,CAACM,yBAAyB,EAAED,KAAK,CAACQ,GAAG,EAAEN,sBAAsB,CAACM,GAAG,CAAC;MAC5F,CAAC,MACI;QACD,MAAMhB,iBAAiB,CAACS,yBAAyB,EAAED,KAAK,CAACQ,GAAG,EAAEN,sBAAsB,CAACM,GAAG,CAAC;MAC7F;MACA,IAAInB,sBAAsB,CAACa,sBAAsB,CAAC,EAAE;QAChD,MAAMN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,sBAAsB,CAACS,MAAM,CAAC,CAAC,CAAC,CAAC;MACrG,CAAC,MACI;QACD,MAAMf,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,sBAAsB,CAAC;MAC3F;MACA,OAAOA,sBAAsB;IACjC,CAAC;IACD,OAAO;MACHU,MAAMA,CAACZ,KAAK,EAAEC,yBAAyB,EAAE;QACrC,MAAMY,8BAA8B,GAAGhB,+BAA+B,CAACiB,GAAG,CAACb,yBAAyB,CAAC;QACrG,IAAIY,8BAA8B,KAAKE,SAAS,EAAE;UAC9C,OAAOC,OAAO,CAACC,OAAO,CAACJ,8BAA8B,CAAC;QAC1D;QACA,OAAOd,sBAAsB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MACnE;IACJ,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}