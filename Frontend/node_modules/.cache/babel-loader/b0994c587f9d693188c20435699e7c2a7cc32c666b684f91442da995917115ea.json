{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Santosh Lade\\\\Desktop\\\\MERN App\\\\client\\\\src\\\\components\\\\ScreenRecording\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { Button } from \"reactstrap\";\nimport axios from \"axios\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScreenRecording = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [mediaChunks, setMediaChunks] = useState([]);\n  const mediaRecorderRef = useRef(null);\n  const videoRef = useRef(null);\n  const constraints = {\n    video: {\n      mediaSource: \"screen\"\n    },\n    audio: true\n  };\n  const handleRecord = async () => {\n    const userPermission = window.confirm(\"Do you want to start recording the screen and webcam?\");\n    if (!userPermission) return;\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          setMediaChunks(prevChunks => [...prevChunks, event.data]);\n        }\n      };\n      mediaRecorderRef.current.onstop = () => {\n        saveRecording();\n        stream.getTracks().forEach(track => track.stop()); // Stop both screen and audio tracks\n        setMediaChunks([]); // Clear media chunks\n        videoRef.current.srcObject = null; // Clear video source\n      };\n\n      mediaRecorderRef.current.start();\n      setRecording(true);\n      videoRef.current.srcObject = stream; // Display video while recording\n    } catch (error) {\n      console.error(\"Error accessing media:\", error);\n    }\n  };\n  const handleStopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\n      mediaRecorderRef.current.stop();\n      setRecording(false);\n    }\n  };\n  const saveRecording = async () => {\n    if (mediaChunks.length > 0) {\n      const blob = new Blob(mediaChunks, {\n        type: \"video/webm\"\n      });\n      const formData = new FormData();\n      formData.append(\"video\", blob);\n      try {\n        const response = await axios.post(\"http://localhost:8080/api/saveRecording\", formData); // Replace with your backend URL\n        console.log(\"Recording saved successfully:\", response.data);\n      } catch (error) {\n        console.error(\"An error occurred while saving recording:\", error);\n      }\n    }\n  };\n  const downloadRecording = () => {\n    if (mediaChunks.length > 0) {\n      const blob = new Blob(mediaChunks, {\n        type: \"video/webm\"\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = \"recorded-video.webm\";\n      a.click();\n      URL.revokeObjectURL(url);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen-record-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      style: {\n        display: recording ? \"block\" : \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), !recording ? /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleRecord,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleStopRecording,\n        children: \"Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: downloadRecording,\n        children: \"Download Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(ScreenRecording, \"OYeR/HDgAUY7aZFKgEpyaBkHSeE=\");\n_c = ScreenRecording;\nexport default ScreenRecording;\nvar _c;\n$RefreshReg$(_c, \"ScreenRecording\");","map":{"version":3,"names":["React","useState","useRef","Button","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ScreenRecording","_s","recording","setRecording","mediaChunks","setMediaChunks","mediaRecorderRef","videoRef","constraints","video","mediaSource","audio","handleRecord","userPermission","window","confirm","stream","navigator","mediaDevices","getUserMedia","current","MediaRecorder","ondataavailable","event","data","size","prevChunks","onstop","saveRecording","getTracks","forEach","track","stop","srcObject","start","error","console","handleStopRecording","state","length","blob","Blob","type","formData","FormData","append","response","post","log","downloadRecording","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","className","children","ref","autoPlay","style","display","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/src/components/ScreenRecording/index.jsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport \"./style.css\"\r\n\r\nconst ScreenRecording = () => {\r\n  const [recording, setRecording] = useState(false);\r\n  const [mediaChunks, setMediaChunks] = useState([]);\r\n  const mediaRecorderRef = useRef(null);\r\n  const videoRef = useRef(null);\r\n\r\n  const constraints = {\r\n    video: {\r\n      mediaSource: \"screen\",\r\n    },\r\n    audio: true,\r\n  };\r\n\r\n  const handleRecord = async () => {\r\n    const userPermission = window.confirm(\"Do you want to start recording the screen and webcam?\");\r\n    if (!userPermission) return;\r\n\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n\r\n      mediaRecorderRef.current = new MediaRecorder(stream);\r\n      mediaRecorderRef.current.ondataavailable = (event) => {\r\n        if (event.data.size > 0) {\r\n          setMediaChunks((prevChunks) => [...prevChunks, event.data]);\r\n        }\r\n      };\r\n\r\n      mediaRecorderRef.current.onstop = () => {\r\n        saveRecording();\r\n        stream.getTracks().forEach((track) => track.stop()); // Stop both screen and audio tracks\r\n        setMediaChunks([]); // Clear media chunks\r\n        videoRef.current.srcObject = null; // Clear video source\r\n      };\r\n\r\n      mediaRecorderRef.current.start();\r\n      setRecording(true);\r\n      videoRef.current.srcObject = stream; // Display video while recording\r\n    } catch (error) {\r\n      console.error(\"Error accessing media:\", error);\r\n    }\r\n  };\r\n\r\n  const handleStopRecording = () => {\r\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === \"recording\") {\r\n      mediaRecorderRef.current.stop();\r\n      setRecording(false);\r\n    }\r\n  };\r\n\r\n  const saveRecording = async () => {\r\n    if (mediaChunks.length > 0) {\r\n      const blob = new Blob(mediaChunks, { type: \"video/webm\" });\r\n      const formData = new FormData();\r\n      formData.append(\"video\", blob);\r\n\r\n      try {\r\n        const response = await axios.post(\"http://localhost:8080/api/saveRecording\", formData); // Replace with your backend URL\r\n        console.log(\"Recording saved successfully:\", response.data);\r\n      } catch (error) {\r\n        console.error(\"An error occurred while saving recording:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const downloadRecording = () => {\r\n    if (mediaChunks.length > 0) {\r\n      const blob = new Blob(mediaChunks, { type: \"video/webm\" });\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = \"recorded-video.webm\";\r\n      a.click();\r\n      URL.revokeObjectURL(url);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"screen-record-wrapper\">\r\n      <video ref={videoRef} autoPlay style={{ display: recording ? \"block\" : \"none\" }} />\r\n      {!recording ? (\r\n        <Button onClick={handleRecord}>Start Recording</Button>\r\n      ) : (\r\n        <>\r\n          <Button onClick={handleStopRecording}>Stop Recording</Button>\r\n          <Button onClick={downloadRecording}>Download Recording</Button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScreenRecording;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}