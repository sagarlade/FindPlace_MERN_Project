{"ast":null,"code":"import { register as rgstr } from 'media-encoder-host';\nimport { createBlobEventFactory } from './factories/blob-event-factory';\nimport { createDecodeWebMChunk } from './factories/decode-web-m-chunk';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createEventTargetFactory } from './factories/event-target-factory';\nimport { createInvalidModificationError } from './factories/invalid-modification-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaRecorderConstructor } from './factories/media-recorder-constructor';\nimport { createNativeBlobEventConstructor } from './factories/native-blob-event-constructor';\nimport { createNativeMediaRecorderFactory } from './factories/native-media-recorder';\nimport { createNativeMediaRecorderConstructor } from './factories/native-media-recorder-constructor';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createReadElementContent } from './factories/read-element-content';\nimport { createReadElementType } from './factories/read-element-type';\nimport { createReadVariableSizeInteger } from './factories/read-variable-size-integer';\nimport { createWebAudioMediaRecorderFactory } from './factories/web-audio-media-recorder';\nimport { createWebmPcmMediaRecorderFactory } from './factories/webm-pcm-media-recorder';\nimport { createWindow } from './factories/window';\nimport { readVariableSizeIntegerLength } from './functions/read-variable-size-integer-length';\nimport { wrapEventListener } from './functions/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst encoderRegexes = [];\nconst window = createWindow();\nconst nativeBlobEventConstructor = createNativeBlobEventConstructor(window);\nconst createBlobEvent = createBlobEventFactory(nativeBlobEventConstructor);\nconst createWebAudioMediaRecorder = createWebAudioMediaRecorderFactory(createBlobEvent, createInvalidModificationError, createInvalidStateError, createNotSupportedError);\nconst readVariableSizeInteger = createReadVariableSizeInteger(readVariableSizeIntegerLength);\nconst readElementContent = createReadElementContent(readVariableSizeInteger);\nconst readElementType = createReadElementType(readVariableSizeInteger);\nconst decodeWebMChunk = createDecodeWebMChunk(readElementContent, readElementType);\nconst createWebmPcmMediaRecorder = createWebmPcmMediaRecorderFactory(createBlobEvent, createInvalidModificationError, createNotSupportedError, decodeWebMChunk, readVariableSizeInteger);\nconst createEventTarget = createEventTargetFactory(window);\nconst nativeMediaRecorderConstructor = createNativeMediaRecorderConstructor(window);\nconst createNativeMediaRecorder = createNativeMediaRecorderFactory(createInvalidModificationError, createNotSupportedError);\nconst mediaRecorderConstructor = createMediaRecorderConstructor(createNativeMediaRecorder, createNotSupportedError, createWebAudioMediaRecorder, createWebmPcmMediaRecorder, encoderRegexes, createEventTargetConstructor(createEventTarget, wrapEventListener), nativeMediaRecorderConstructor);\nexport { mediaRecorderConstructor as MediaRecorder };\nexport const isSupported = () => createIsSupportedPromise(window);\nexport const register = async port => {\n  encoderRegexes.push(await rgstr(port));\n};","map":{"version":3,"names":["register","rgstr","createBlobEventFactory","createDecodeWebMChunk","createEventTargetConstructor","createEventTargetFactory","createInvalidModificationError","createInvalidStateError","createIsSupportedPromise","createMediaRecorderConstructor","createNativeBlobEventConstructor","createNativeMediaRecorderFactory","createNativeMediaRecorderConstructor","createNotSupportedError","createReadElementContent","createReadElementType","createReadVariableSizeInteger","createWebAudioMediaRecorderFactory","createWebmPcmMediaRecorderFactory","createWindow","readVariableSizeIntegerLength","wrapEventListener","encoderRegexes","window","nativeBlobEventConstructor","createBlobEvent","createWebAudioMediaRecorder","readVariableSizeInteger","readElementContent","readElementType","decodeWebMChunk","createWebmPcmMediaRecorder","createEventTarget","nativeMediaRecorderConstructor","createNativeMediaRecorder","mediaRecorderConstructor","MediaRecorder","isSupported","port","push"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/extendable-media-recorder/build/es2019/module.js"],"sourcesContent":["import { register as rgstr } from 'media-encoder-host';\nimport { createBlobEventFactory } from './factories/blob-event-factory';\nimport { createDecodeWebMChunk } from './factories/decode-web-m-chunk';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createEventTargetFactory } from './factories/event-target-factory';\nimport { createInvalidModificationError } from './factories/invalid-modification-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaRecorderConstructor } from './factories/media-recorder-constructor';\nimport { createNativeBlobEventConstructor } from './factories/native-blob-event-constructor';\nimport { createNativeMediaRecorderFactory } from './factories/native-media-recorder';\nimport { createNativeMediaRecorderConstructor } from './factories/native-media-recorder-constructor';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createReadElementContent } from './factories/read-element-content';\nimport { createReadElementType } from './factories/read-element-type';\nimport { createReadVariableSizeInteger } from './factories/read-variable-size-integer';\nimport { createWebAudioMediaRecorderFactory } from './factories/web-audio-media-recorder';\nimport { createWebmPcmMediaRecorderFactory } from './factories/webm-pcm-media-recorder';\nimport { createWindow } from './factories/window';\nimport { readVariableSizeIntegerLength } from './functions/read-variable-size-integer-length';\nimport { wrapEventListener } from './functions/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst encoderRegexes = [];\nconst window = createWindow();\nconst nativeBlobEventConstructor = createNativeBlobEventConstructor(window);\nconst createBlobEvent = createBlobEventFactory(nativeBlobEventConstructor);\nconst createWebAudioMediaRecorder = createWebAudioMediaRecorderFactory(createBlobEvent, createInvalidModificationError, createInvalidStateError, createNotSupportedError);\nconst readVariableSizeInteger = createReadVariableSizeInteger(readVariableSizeIntegerLength);\nconst readElementContent = createReadElementContent(readVariableSizeInteger);\nconst readElementType = createReadElementType(readVariableSizeInteger);\nconst decodeWebMChunk = createDecodeWebMChunk(readElementContent, readElementType);\nconst createWebmPcmMediaRecorder = createWebmPcmMediaRecorderFactory(createBlobEvent, createInvalidModificationError, createNotSupportedError, decodeWebMChunk, readVariableSizeInteger);\nconst createEventTarget = createEventTargetFactory(window);\nconst nativeMediaRecorderConstructor = createNativeMediaRecorderConstructor(window);\nconst createNativeMediaRecorder = createNativeMediaRecorderFactory(createInvalidModificationError, createNotSupportedError);\nconst mediaRecorderConstructor = createMediaRecorderConstructor(createNativeMediaRecorder, createNotSupportedError, createWebAudioMediaRecorder, createWebmPcmMediaRecorder, encoderRegexes, createEventTargetConstructor(createEventTarget, wrapEventListener), nativeMediaRecorderConstructor);\nexport { mediaRecorderConstructor as MediaRecorder };\nexport const isSupported = () => createIsSupportedPromise(window);\nexport const register = async (port) => {\n    encoderRegexes.push(await rgstr(port));\n};\n//# sourceMappingURL=module.js.map"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,KAAK,QAAQ,oBAAoB;AACtD,SAASC,sBAAsB,QAAQ,gCAAgC;AACvE,SAASC,qBAAqB,QAAQ,gCAAgC;AACtE,SAASC,4BAA4B,QAAQ,sCAAsC;AACnF,SAASC,wBAAwB,QAAQ,kCAAkC;AAC3E,SAASC,8BAA8B,QAAQ,wCAAwC;AACvF,SAASC,uBAAuB,QAAQ,iCAAiC;AACzE,SAASC,wBAAwB,QAAQ,kCAAkC;AAC3E,SAASC,8BAA8B,QAAQ,wCAAwC;AACvF,SAASC,gCAAgC,QAAQ,2CAA2C;AAC5F,SAASC,gCAAgC,QAAQ,mCAAmC;AACpF,SAASC,oCAAoC,QAAQ,+CAA+C;AACpG,SAASC,uBAAuB,QAAQ,iCAAiC;AACzE,SAASC,wBAAwB,QAAQ,kCAAkC;AAC3E,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,SAASC,6BAA6B,QAAQ,wCAAwC;AACtF,SAASC,kCAAkC,QAAQ,sCAAsC;AACzF,SAASC,iCAAiC,QAAQ,qCAAqC;AACvF,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,6BAA6B,QAAQ,+CAA+C;AAC7F,SAASC,iBAAiB,QAAQ,iCAAiC;AACnE;AACA;AACA;AACA;AACA,cAAc,oBAAoB;AAClC,cAAc,eAAe;AAC7B,MAAMC,cAAc,GAAG,EAAE;AACzB,MAAMC,MAAM,GAAGJ,YAAY,CAAC,CAAC;AAC7B,MAAMK,0BAA0B,GAAGd,gCAAgC,CAACa,MAAM,CAAC;AAC3E,MAAME,eAAe,GAAGvB,sBAAsB,CAACsB,0BAA0B,CAAC;AAC1E,MAAME,2BAA2B,GAAGT,kCAAkC,CAACQ,eAAe,EAAEnB,8BAA8B,EAAEC,uBAAuB,EAAEM,uBAAuB,CAAC;AACzK,MAAMc,uBAAuB,GAAGX,6BAA6B,CAACI,6BAA6B,CAAC;AAC5F,MAAMQ,kBAAkB,GAAGd,wBAAwB,CAACa,uBAAuB,CAAC;AAC5E,MAAME,eAAe,GAAGd,qBAAqB,CAACY,uBAAuB,CAAC;AACtE,MAAMG,eAAe,GAAG3B,qBAAqB,CAACyB,kBAAkB,EAAEC,eAAe,CAAC;AAClF,MAAME,0BAA0B,GAAGb,iCAAiC,CAACO,eAAe,EAAEnB,8BAA8B,EAAEO,uBAAuB,EAAEiB,eAAe,EAAEH,uBAAuB,CAAC;AACxL,MAAMK,iBAAiB,GAAG3B,wBAAwB,CAACkB,MAAM,CAAC;AAC1D,MAAMU,8BAA8B,GAAGrB,oCAAoC,CAACW,MAAM,CAAC;AACnF,MAAMW,yBAAyB,GAAGvB,gCAAgC,CAACL,8BAA8B,EAAEO,uBAAuB,CAAC;AAC3H,MAAMsB,wBAAwB,GAAG1B,8BAA8B,CAACyB,yBAAyB,EAAErB,uBAAuB,EAAEa,2BAA2B,EAAEK,0BAA0B,EAAET,cAAc,EAAElB,4BAA4B,CAAC4B,iBAAiB,EAAEX,iBAAiB,CAAC,EAAEY,8BAA8B,CAAC;AAChS,SAASE,wBAAwB,IAAIC,aAAa;AAClD,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM7B,wBAAwB,CAACe,MAAM,CAAC;AACjE,OAAO,MAAMvB,QAAQ,GAAG,MAAOsC,IAAI,IAAK;EACpChB,cAAc,CAACiB,IAAI,CAAC,MAAMtC,KAAK,CAACqC,IAAI,CAAC,CAAC;AAC1C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}