{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Santosh Lade\\\\Desktop\\\\MERN App\\\\client\\\\src\\\\components\\\\ScreenRecording\\\\index.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { Row, Col, Button, Badge } from \"antd\";\n// import { useReactMediaRecorder } from \"react-media-recorder\";\n// import Text from \"antd/lib/typography/Text\";\n// import axios from \"axios\";\n// import \"./style.css\"\n// const ScreenRecording = ({\n//   screen,\n//   audio,\n//   video,\n//   downloadRecordingPath,\n//   downloadRecordingType,\n// }) => {\n//   const [recordingNumber, setRecordingNumber] = useState(0);\n//   const [status, setStatus] = useState(\"\");\n//   const [mediaBlobUrl, setMediaBlobUrl] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n\n//   const {\n//     startRecording,\n//     stopRecording,\n//     mediaBlobUrl: recordedMediaBlobUrl,\n//   } = useReactMediaRecorder({ screen, audio, video });\n\n//   const handleStartRecording = () => {\n//     startRecording();\n//     setStatus(\"recording\");\n//   };\n\n//   const handleStopRecording = async () => {\n//     try {\n//       const currentTimeStamp = new Date().getTime();\n//       setRecordingNumber(currentTimeStamp);\n\n//       await stopRecording();\n//       setStatus(\"stopped\");\n//       setMediaBlobUrl(recordedMediaBlobUrl);\n\n//       const recordingData = {\n//         url: recordedMediaBlobUrl,\n//         timestamp: currentTimeStamp,\n//       };\n//       const url = \"http://localhost:8080/api/recording\"; // Replace with your backend URL\n//       await axios.post(url, recordingData);\n//       console.log(\"Recording saved successfully\");\n//     } catch (error) {\n//       setError(\"An error occurred while stopping recording.\");\n//       console.error(error);\n//     }\n//   };\n\n//   const handleViewRecording = () => {\n//     window.open(mediaBlobUrl, \"_blank\").focus();\n//   };\n\n//   const handleDownloadRecording = () => {\n//     const pathName = `${downloadRecordingPath}_${recordingNumber}.${downloadRecordingType}`;\n//     try {\n//       if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n//         window.navigator.msSaveOrOpenBlob(mediaBlobUrl, pathName);\n//       } else {\n//         const link = document.createElement(\"a\");\n//         link.href = mediaBlobUrl;\n//         link.download = pathName;\n//         document.body.appendChild(link);\n//         link.click();\n//         document.body.removeChild(link);\n//       }\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"Screen-Record-Wrapper\" style={{ padding: \"5px 20px\" }}>\n//       <Row>\n//         <Col span={10} style={{ lineHeight: \"24px\" }}>\n//           {status && status !== \"stopped\" && (\n//             <Text>\n//               Screen Recording Status: {status && status.toUpperCase()}\n//             </Text>\n//           )}\n//           {status && status === \"recording\" && (\n//             <Badge\n//               className=\"screen-recording-badge\"\n//               color=\"#faad14\"\n//               status=\"processing\"\n//               offset={[2, 0]}\n//               style={{\n//                 marginLeft: \"5px\",\n//               }}\n//             />\n//           )}\n//         </Col>\n//         <Col span={10} style={{ textAlign: \"right\" }}>\n//           {status && status !== \"recording\" && (\n//             <Button\n//               size=\"small\"\n//               onClick={handleStartRecording}\n//               type=\"primary\"\n//               icon=\"play-circle\"\n//               className=\"margin-left-sm\"\n//               ghost\n//             >\n//               {mediaBlobUrl ? \"Record again\" : \"Record your Problem\"}\n//             </Button>\n//           )}\n//           {status && status === \"recording\" && (\n//             <Button\n//               size=\"small\"\n//               onClick={handleStopRecording}\n//               type=\"danger\"\n//               icon=\"stop\"\n//               className=\"margin-left-sm\"\n//               ghost\n//             >\n//               Stop Recording\n//             </Button>\n//           )}\n//           {mediaBlobUrl && status && status === \"stopped\" && (\n//             <Button\n//               size=\"small\"\n//               onClick={handleViewRecording}\n//               type=\"primary\"\n//               icon=\"picture\"\n//               className=\"viewRecording margin-left-sm\"\n//             >\n//               View\n//             </Button>\n//           )}\n//           {downloadRecordingType &&\n//             mediaBlobUrl &&\n//             status &&\n//             status === \"stopped\" && (\n//               <Button\n//                 size=\"small\"\n//                 onClick={handleDownloadRecording}\n//                 type=\"primary\"\n//                 icon=\"download\"\n//                 className=\"downloadRecording margin-left-sm\"\n//               >\n//                 Download\n//               </Button>\n//             )}\n//         </Col>\n//       </Row>\n//     </div>\n//   );\n// };\n\n// export default ScreenRecording;\n\nimport React, { useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport RecordRTC from \"recordrtc\";\nimport MongoClient from \"mongodb\";\nimport mongoose from \"mongoose\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScreenRecording = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [user, setUser] = useState(null);\n  const handleRecordWindow = async () => {\n    const recorder = await RecordRTC.createRecorder();\n    recorder.startRecording();\n    setRecording(true);\n  };\n  const handleRecordWebcam = async () => {\n    const recorder = await RecordRTC.createRecorder();\n    recorder.startRecording(\"video\");\n    setRecording(true);\n  };\n  const handleRecordAudio = async () => {\n    const recorder = await RecordRTC.createRecorder();\n    recorder.startRecording(\"audio\");\n    setRecording(true);\n  };\n  const handleStopRecording = async () => {\n    if (recording) {\n      const recorder = RecordRTC.getRecorder();\n      recorder.stopRecording();\n      setRecording(false);\n    }\n  };\n  const saveRecording = async () => {\n    try {\n      const recordingData = {\n        url: recordedMediaBlobUrl,\n        timestamp: currentTimeStamp\n      };\n      const url = \"http://localhost:8080/api/recording\"; // Replace with your backend URL\n      await axios.post(url, recordingData);\n      console.log(\"Recording saved successfully\");\n    } catch (error) {\n      setError(\"An error occurred while stopping recording.\");\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Recording Confirmation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Are you sure you want to start recording?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleRecordWindow,\n      children: \"Record Entire Window\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleRecordWebcam,\n      children: \"Record Webcam\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleRecordAudio,\n      children: \"Record Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), recording && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleStopRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }, this), recording && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => saveRecording(recording),\n      children: \"Save Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(ScreenRecording, \"W8tBPmZwLjKC6sZTR+xkR9BA3c0=\");\n_c = ScreenRecording;\nexport default ScreenRecording;\nvar _c;\n$RefreshReg$(_c, \"ScreenRecording\");","map":{"version":3,"names":["React","useState","Button","RecordRTC","MongoClient","mongoose","jsxDEV","_jsxDEV","ScreenRecording","_s","recording","setRecording","user","setUser","handleRecordWindow","recorder","createRecorder","startRecording","handleRecordWebcam","handleRecordAudio","handleStopRecording","getRecorder","stopRecording","saveRecording","recordingData","url","recordedMediaBlobUrl","timestamp","currentTimeStamp","axios","post","console","log","error","setError","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/src/components/ScreenRecording/index.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { Row, Col, Button, Badge } from \"antd\";\r\n// import { useReactMediaRecorder } from \"react-media-recorder\";\r\n// import Text from \"antd/lib/typography/Text\";\r\n// import axios from \"axios\";\r\n// import \"./style.css\"\r\n// const ScreenRecording = ({\r\n//   screen,\r\n//   audio,\r\n//   video,\r\n//   downloadRecordingPath,\r\n//   downloadRecordingType,\r\n// }) => {\r\n//   const [recordingNumber, setRecordingNumber] = useState(0);\r\n//   const [status, setStatus] = useState(\"\");\r\n//   const [mediaBlobUrl, setMediaBlobUrl] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   const {\r\n//     startRecording,\r\n//     stopRecording,\r\n//     mediaBlobUrl: recordedMediaBlobUrl,\r\n//   } = useReactMediaRecorder({ screen, audio, video });\r\n\r\n//   const handleStartRecording = () => {\r\n//     startRecording();\r\n//     setStatus(\"recording\");\r\n//   };\r\n\r\n//   const handleStopRecording = async () => {\r\n//     try {\r\n//       const currentTimeStamp = new Date().getTime();\r\n//       setRecordingNumber(currentTimeStamp);\r\n\r\n//       await stopRecording();\r\n//       setStatus(\"stopped\");\r\n//       setMediaBlobUrl(recordedMediaBlobUrl);\r\n\r\n//       const recordingData = {\r\n//         url: recordedMediaBlobUrl,\r\n//         timestamp: currentTimeStamp,\r\n//       };\r\n//       const url = \"http://localhost:8080/api/recording\"; // Replace with your backend URL\r\n//       await axios.post(url, recordingData);\r\n//       console.log(\"Recording saved successfully\");\r\n//     } catch (error) {\r\n//       setError(\"An error occurred while stopping recording.\");\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const handleViewRecording = () => {\r\n//     window.open(mediaBlobUrl, \"_blank\").focus();\r\n//   };\r\n\r\n//   const handleDownloadRecording = () => {\r\n//     const pathName = `${downloadRecordingPath}_${recordingNumber}.${downloadRecordingType}`;\r\n//     try {\r\n//       if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n//         window.navigator.msSaveOrOpenBlob(mediaBlobUrl, pathName);\r\n//       } else {\r\n//         const link = document.createElement(\"a\");\r\n//         link.href = mediaBlobUrl;\r\n//         link.download = pathName;\r\n//         document.body.appendChild(link);\r\n//         link.click();\r\n//         document.body.removeChild(link);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"Screen-Record-Wrapper\" style={{ padding: \"5px 20px\" }}>\r\n//       <Row>\r\n//         <Col span={10} style={{ lineHeight: \"24px\" }}>\r\n//           {status && status !== \"stopped\" && (\r\n//             <Text>\r\n//               Screen Recording Status: {status && status.toUpperCase()}\r\n//             </Text>\r\n//           )}\r\n//           {status && status === \"recording\" && (\r\n//             <Badge\r\n//               className=\"screen-recording-badge\"\r\n//               color=\"#faad14\"\r\n//               status=\"processing\"\r\n//               offset={[2, 0]}\r\n//               style={{\r\n//                 marginLeft: \"5px\",\r\n//               }}\r\n//             />\r\n//           )}\r\n//         </Col>\r\n//         <Col span={10} style={{ textAlign: \"right\" }}>\r\n//           {status && status !== \"recording\" && (\r\n//             <Button\r\n//               size=\"small\"\r\n//               onClick={handleStartRecording}\r\n//               type=\"primary\"\r\n//               icon=\"play-circle\"\r\n//               className=\"margin-left-sm\"\r\n//               ghost\r\n//             >\r\n//               {mediaBlobUrl ? \"Record again\" : \"Record your Problem\"}\r\n//             </Button>\r\n//           )}\r\n//           {status && status === \"recording\" && (\r\n//             <Button\r\n//               size=\"small\"\r\n//               onClick={handleStopRecording}\r\n//               type=\"danger\"\r\n//               icon=\"stop\"\r\n//               className=\"margin-left-sm\"\r\n//               ghost\r\n//             >\r\n//               Stop Recording\r\n//             </Button>\r\n//           )}\r\n//           {mediaBlobUrl && status && status === \"stopped\" && (\r\n//             <Button\r\n//               size=\"small\"\r\n//               onClick={handleViewRecording}\r\n//               type=\"primary\"\r\n//               icon=\"picture\"\r\n//               className=\"viewRecording margin-left-sm\"\r\n//             >\r\n//               View\r\n//             </Button>\r\n//           )}\r\n//           {downloadRecordingType &&\r\n//             mediaBlobUrl &&\r\n//             status &&\r\n//             status === \"stopped\" && (\r\n//               <Button\r\n//                 size=\"small\"\r\n//                 onClick={handleDownloadRecording}\r\n//                 type=\"primary\"\r\n//                 icon=\"download\"\r\n//                 className=\"downloadRecording margin-left-sm\"\r\n//               >\r\n//                 Download\r\n//               </Button>\r\n//             )}\r\n//         </Col>\r\n//       </Row>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ScreenRecording;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport RecordRTC from \"recordrtc\";\r\nimport MongoClient from \"mongodb\";\r\nimport mongoose from \"mongoose\";\r\n\r\nconst ScreenRecording = () => {\r\n  const [recording, setRecording] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n\r\n  const handleRecordWindow = async () => {\r\n    const recorder = await RecordRTC.createRecorder();\r\n    recorder.startRecording();\r\n    setRecording(true);\r\n  };\r\n\r\n  const handleRecordWebcam = async () => {\r\n    const recorder = await RecordRTC.createRecorder();\r\n    recorder.startRecording(\"video\");\r\n    setRecording(true);\r\n  };\r\n\r\n  const handleRecordAudio = async () => {\r\n    const recorder = await RecordRTC.createRecorder();\r\n    recorder.startRecording(\"audio\");\r\n    setRecording(true);\r\n  };\r\n\r\n  const handleStopRecording = async () => {\r\n    if (recording) {\r\n      const recorder = RecordRTC.getRecorder();\r\n      recorder.stopRecording();\r\n      setRecording(false);\r\n    }\r\n  };\r\n\r\n  const saveRecording = async () => {\r\n    try {\r\n      const recordingData = {\r\n        url: recordedMediaBlobUrl,\r\n        timestamp: currentTimeStamp,\r\n      };\r\n      const url = \"http://localhost:8080/api/recording\"; // Replace with your backend URL\r\n      await axios.post(url, recordingData);\r\n      console.log(\"Recording saved successfully\");\r\n    } catch (error) {\r\n      setError(\"An error occurred while stopping recording.\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Recording Confirmation</h1>\r\n      <p>\r\n        Are you sure you want to start recording?\r\n      </p>\r\n      <Button onClick={handleRecordWindow}>Record Entire Window</Button>\r\n      <Button onClick={handleRecordWebcam}>Record Webcam</Button>\r\n      <Button onClick={handleRecordAudio}>Record Audio</Button>\r\n      {recording && (\r\n        <Button onClick={handleStopRecording}>Stop Recording</Button>\r\n      )}\r\n      {recording && (\r\n        <Button onClick={() => saveRecording(recording)}>Save Recording</Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScreenRecording;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}