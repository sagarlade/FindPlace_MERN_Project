{"ast":null,"code":"export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n  return (nativeAudioNode, whenConnected, whenDisconnected) => {\n    const connections = new Set();\n    nativeAudioNode.connect = (connect => {\n      // tslint:disable-next-line:invalid-void no-inferrable-types\n      return (destination, output = 0, input = 0) => {\n        const wasDisconnected = connections.size === 0;\n        if (isNativeAudioNode(destination)) {\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          connect.call(nativeAudioNode, destination, output, input);\n          insertElementInSet(connections, [destination, output, input], connection => connection[0] === destination && connection[1] === output && connection[2] === input, true);\n          if (wasDisconnected) {\n            whenConnected();\n          }\n          return destination;\n        }\n        connect.call(nativeAudioNode, destination, output);\n        insertElementInSet(connections, [destination, output], connection => connection[0] === destination && connection[1] === output, true);\n        if (wasDisconnected) {\n          whenConnected();\n        }\n        return;\n      };\n    })(nativeAudioNode.connect);\n    nativeAudioNode.disconnect = (disconnect => {\n      return (destinationOrOutput, output, input) => {\n        const wasConnected = connections.size > 0;\n        if (destinationOrOutput === undefined) {\n          disconnect.apply(nativeAudioNode);\n          connections.clear();\n        } else if (typeof destinationOrOutput === 'number') {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioNode, destinationOrOutput);\n          for (const connection of connections) {\n            if (connection[1] === destinationOrOutput) {\n              connections.delete(connection);\n            }\n          }\n        } else {\n          if (isNativeAudioNode(destinationOrOutput)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n          } else {\n            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output);\n          }\n          for (const connection of connections) {\n            if (connection[0] === destinationOrOutput && (output === undefined || connection[1] === output) && (input === undefined || connection[2] === input)) {\n              connections.delete(connection);\n            }\n          }\n        }\n        const isDisconnected = connections.size === 0;\n        if (wasConnected && isDisconnected) {\n          whenDisconnected();\n        }\n      };\n    })(nativeAudioNode.disconnect);\n    return nativeAudioNode;\n  };\n};","map":{"version":3,"names":["createMonitorConnections","insertElementInSet","isNativeAudioNode","nativeAudioNode","whenConnected","whenDisconnected","connections","Set","connect","destination","output","input","wasDisconnected","size","call","connection","disconnect","destinationOrOutput","wasConnected","undefined","apply","clear","delete","isDisconnected"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js"],"sourcesContent":["export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n    return (nativeAudioNode, whenConnected, whenDisconnected) => {\n        const connections = new Set();\n        nativeAudioNode.connect = ((connect) => {\n            // tslint:disable-next-line:invalid-void no-inferrable-types\n            return (destination, output = 0, input = 0) => {\n                const wasDisconnected = connections.size === 0;\n                if (isNativeAudioNode(destination)) {\n                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                    connect.call(nativeAudioNode, destination, output, input);\n                    insertElementInSet(connections, [destination, output, input], (connection) => connection[0] === destination && connection[1] === output && connection[2] === input, true);\n                    if (wasDisconnected) {\n                        whenConnected();\n                    }\n                    return destination;\n                }\n                connect.call(nativeAudioNode, destination, output);\n                insertElementInSet(connections, [destination, output], (connection) => connection[0] === destination && connection[1] === output, true);\n                if (wasDisconnected) {\n                    whenConnected();\n                }\n                return;\n            };\n        })(nativeAudioNode.connect);\n        nativeAudioNode.disconnect = ((disconnect) => {\n            return (destinationOrOutput, output, input) => {\n                const wasConnected = connections.size > 0;\n                if (destinationOrOutput === undefined) {\n                    disconnect.apply(nativeAudioNode);\n                    connections.clear();\n                }\n                else if (typeof destinationOrOutput === 'number') {\n                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                    disconnect.call(nativeAudioNode, destinationOrOutput);\n                    for (const connection of connections) {\n                        if (connection[1] === destinationOrOutput) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                else {\n                    if (isNativeAudioNode(destinationOrOutput)) {\n                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n                    }\n                    else {\n                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output);\n                    }\n                    for (const connection of connections) {\n                        if (connection[0] === destinationOrOutput &&\n                            (output === undefined || connection[1] === output) &&\n                            (input === undefined || connection[2] === input)) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                const isDisconnected = connections.size === 0;\n                if (wasConnected && isDisconnected) {\n                    whenDisconnected();\n                }\n            };\n        })(nativeAudioNode.disconnect);\n        return nativeAudioNode;\n    };\n};\n//# sourceMappingURL=monitor-connections.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}