{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeDynamicsCompressorNodes = new WeakMap();\n    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n       * created again.\n       */\n      const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        const options = {\n          attack: nativeDynamicsCompressorNode.attack.value,\n          channelCount: nativeDynamicsCompressorNode.channelCount,\n          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n          knee: nativeDynamicsCompressorNode.knee.value,\n          ratio: nativeDynamicsCompressorNode.ratio.value,\n          release: nativeDynamicsCompressorNode.release.value,\n          threshold: nativeDynamicsCompressorNode.threshold.value\n        };\n        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n        await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n        await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n        await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n        await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n      return nativeDynamicsCompressorNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createDynamicsCompressorNodeRendererFactory","connectAudioParam","createNativeDynamicsCompressorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeDynamicsCompressorNodes","WeakMap","createDynamicsCompressorNode","proxy","nativeOfflineAudioContext","nativeDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","options","attack","value","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","set","render","renderedNativeDynamicsCompressorNode","get","undefined","Promise","resolve"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=dynamics-compressor-node-renderer-factory.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}