{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return maxDelayTime => {\n    const renderedNativeDelayNodes = new WeakMap();\n    const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeDelayNode = getNativeAudioNode(proxy);\n      // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n      if (!nativeDelayNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeDelayNode.channelCount,\n          channelCountMode: nativeDelayNode.channelCountMode,\n          channelInterpretation: nativeDelayNode.channelInterpretation,\n          delayTime: nativeDelayNode.delayTime.value,\n          maxDelayTime\n        };\n        nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n      if (!nativeDelayNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n      return nativeDelayNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n        return createDelayNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createDelayNodeRendererFactory","connectAudioParam","createNativeDelayNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","maxDelayTime","renderedNativeDelayNodes","WeakMap","createDelayNode","proxy","nativeOfflineAudioContext","nativeDelayNode","nativeDelayNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","delayTime","value","set","render","renderedNativeDelayNode","get","undefined","Promise","resolve"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=delay-node-renderer-factory.js.map"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AACjE,OAAO,MAAMC,8BAA8B,GAAGA,CAACC,iBAAiB,EAAEC,qBAAqB,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEC,uBAAuB,KAAK;EACvJ,OAAQC,YAAY,IAAK;IACrB,MAAMC,wBAAwB,GAAG,IAAIC,OAAO,CAAC,CAAC;IAC9C,MAAMC,eAAe,GAAG,MAAAA,CAAOC,KAAK,EAAEC,yBAAyB,KAAK;MAChE,IAAIC,eAAe,GAAGT,kBAAkB,CAACO,KAAK,CAAC;MAC/C;MACA,MAAMG,+BAA+B,GAAGd,gBAAgB,CAACa,eAAe,EAAED,yBAAyB,CAAC;MACpG,IAAI,CAACE,+BAA+B,EAAE;QAClC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,eAAe,CAACG,YAAY;UAC1CC,gBAAgB,EAAEJ,eAAe,CAACI,gBAAgB;UAClDC,qBAAqB,EAAEL,eAAe,CAACK,qBAAqB;UAC5DC,SAAS,EAAEN,eAAe,CAACM,SAAS,CAACC,KAAK;UAC1Cb;QACJ,CAAC;QACDM,eAAe,GAAGV,qBAAqB,CAACS,yBAAyB,EAAEG,OAAO,CAAC;MAC/E;MACAP,wBAAwB,CAACa,GAAG,CAACT,yBAAyB,EAAEC,eAAe,CAAC;MACxE,IAAI,CAACC,+BAA+B,EAAE;QAClC,MAAMT,gBAAgB,CAACO,yBAAyB,EAAED,KAAK,CAACQ,SAAS,EAAEN,eAAe,CAACM,SAAS,CAAC;MACjG,CAAC,MACI;QACD,MAAMjB,iBAAiB,CAACU,yBAAyB,EAAED,KAAK,CAACQ,SAAS,EAAEN,eAAe,CAACM,SAAS,CAAC;MAClG;MACA,MAAMb,uBAAuB,CAACK,KAAK,EAAEC,yBAAyB,EAAEC,eAAe,CAAC;MAChF,OAAOA,eAAe;IAC1B,CAAC;IACD,OAAO;MACHS,MAAMA,CAACX,KAAK,EAAEC,yBAAyB,EAAE;QACrC,MAAMW,uBAAuB,GAAGf,wBAAwB,CAACgB,GAAG,CAACZ,yBAAyB,CAAC;QACvF,IAAIW,uBAAuB,KAAKE,SAAS,EAAE;UACvC,OAAOC,OAAO,CAACC,OAAO,CAACJ,uBAAuB,CAAC;QACnD;QACA,OAAOb,eAAe,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAC5D;IACJ,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}