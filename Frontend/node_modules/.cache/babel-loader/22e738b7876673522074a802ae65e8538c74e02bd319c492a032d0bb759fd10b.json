{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAudioNode = getNativeAudioNode(proxy);\n      // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n      if (!nativeAudioNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAudioNode.channelCount,\n          channelCountMode: nativeAudioNode.channelCountMode,\n          channelInterpretation: nativeAudioNode.channelInterpretation,\n          numberOfInputs: nativeAudioNode.numberOfInputs\n        };\n        nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n      return nativeAudioNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createChannelMergerNodeRendererFactory","createNativeChannelMergerNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAudioNodes","WeakMap","createAudioNode","proxy","nativeOfflineAudioContext","nativeAudioNode","nativeAudioNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","numberOfInputs","set","render","renderedNativeAudioNode","get","undefined","Promise","resolve"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=channel-merger-node-renderer-factory.js.map"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AACjE,OAAO,MAAMC,sCAAsC,GAAGA,CAACC,6BAA6B,EAAEC,kBAAkB,EAAEC,uBAAuB,KAAK;EAClI,OAAO,MAAM;IACT,MAAMC,wBAAwB,GAAG,IAAIC,OAAO,CAAC,CAAC;IAC9C,MAAMC,eAAe,GAAG,MAAAA,CAAOC,KAAK,EAAEC,yBAAyB,KAAK;MAChE,IAAIC,eAAe,GAAGP,kBAAkB,CAACK,KAAK,CAAC;MAC/C;MACA,MAAMG,+BAA+B,GAAGX,gBAAgB,CAACU,eAAe,EAAED,yBAAyB,CAAC;MACpG,IAAI,CAACE,+BAA+B,EAAE;QAClC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,eAAe,CAACG,YAAY;UAC1CC,gBAAgB,EAAEJ,eAAe,CAACI,gBAAgB;UAClDC,qBAAqB,EAAEL,eAAe,CAACK,qBAAqB;UAC5DC,cAAc,EAAEN,eAAe,CAACM;QACpC,CAAC;QACDN,eAAe,GAAGR,6BAA6B,CAACO,yBAAyB,EAAEG,OAAO,CAAC;MACvF;MACAP,wBAAwB,CAACY,GAAG,CAACR,yBAAyB,EAAEC,eAAe,CAAC;MACxE,MAAMN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,eAAe,CAAC;MAChF,OAAOA,eAAe;IAC1B,CAAC;IACD,OAAO;MACHQ,MAAMA,CAACV,KAAK,EAAEC,yBAAyB,EAAE;QACrC,MAAMU,uBAAuB,GAAGd,wBAAwB,CAACe,GAAG,CAACX,yBAAyB,CAAC;QACvF,IAAIU,uBAAuB,KAAKE,SAAS,EAAE;UACvC,OAAOC,OAAO,CAACC,OAAO,CAACJ,uBAAuB,CAAC;QACnD;QACA,OAAOZ,eAAe,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAC5D;IACJ,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}