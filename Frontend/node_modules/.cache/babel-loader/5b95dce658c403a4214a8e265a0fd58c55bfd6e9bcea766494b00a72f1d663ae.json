{"ast":null,"code":"import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n  const denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\nfunction multiply(a, b) {\n  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\nfunction evaluatePolynomial(coefficient, z) {\n  let result = [0, 0];\n  for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n    result = multiply(result, z);\n    result[0] += coefficient[i];\n  }\n  return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n  return (nativeContext, baseLatency, {\n    channelCount,\n    channelCountMode,\n    channelInterpretation,\n    feedback,\n    feedforward\n  }) => {\n    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    const feedbackLength = convertedFeedback.length;\n    const feedforwardLength = convertedFeedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedbackLength === 0 || feedbackLength > 20) {\n      throw createNotSupportedError();\n    }\n    if (convertedFeedback[0] === 0) {\n      throw createInvalidStateError();\n    }\n    if (feedforwardLength === 0 || feedforwardLength > 20) {\n      throw createNotSupportedError();\n    }\n    if (convertedFeedforward[0] === 0) {\n      throw createInvalidStateError();\n    }\n    if (convertedFeedback[0] !== 1) {\n      for (let i = 0; i < feedforwardLength; i += 1) {\n        convertedFeedforward[i] /= convertedFeedback[0];\n      }\n      for (let i = 1; i < feedbackLength; i += 1) {\n        convertedFeedback[i] /= convertedFeedback[0];\n      }\n    }\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n    scriptProcessorNode.channelCount = channelCount;\n    scriptProcessorNode.channelCountMode = channelCountMode;\n    scriptProcessorNode.channelInterpretation = channelInterpretation;\n    const bufferLength = 32;\n    const bufferIndexes = [];\n    const xBuffers = [];\n    const yBuffers = [];\n    for (let i = 0; i < channelCount; i += 1) {\n      bufferIndexes.push(0);\n      const xBuffer = new Float32Array(bufferLength);\n      const yBuffer = new Float32Array(bufferLength);\n      xBuffer.fill(0);\n      yBuffer.fill(0);\n      xBuffers.push(xBuffer);\n      yBuffers.push(yBuffer);\n    }\n    // tslint:disable-next-line:deprecation\n    scriptProcessorNode.onaudioprocess = event => {\n      const inputBuffer = event.inputBuffer;\n      const outputBuffer = event.outputBuffer;\n      const numberOfChannels = inputBuffer.numberOfChannels;\n      for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = inputBuffer.getChannelData(i);\n        const output = outputBuffer.getChannelData(i);\n        bufferIndexes[i] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n      }\n    };\n    const nyquist = nativeContext.sampleRate / 2;\n    const nativeIIRFilterNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n      get channelCount() {\n        return scriptProcessorNode.channelCount;\n      },\n      set channelCount(value) {\n        scriptProcessorNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return scriptProcessorNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        scriptProcessorNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return scriptProcessorNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        scriptProcessorNode.channelInterpretation = value;\n      },\n      get context() {\n        return scriptProcessorNode.context;\n      },\n      get inputs() {\n        return [scriptProcessorNode];\n      },\n      get numberOfInputs() {\n        return scriptProcessorNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return scriptProcessorNode.numberOfOutputs;\n      },\n      addEventListener(...args) {\n        // @todo Dissallow adding an audioprocess listener.\n        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n      },\n      dispatchEvent(...args) {\n        return scriptProcessorNode.dispatchEvent(args[0]);\n      },\n      getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n        const length = frequencyHz.length;\n        for (let i = 0; i < length; i += 1) {\n          const omega = -Math.PI * (frequencyHz[i] / nyquist);\n          const z = [Math.cos(omega), Math.sin(omega)];\n          const numerator = evaluatePolynomial(convertedFeedforward, z);\n          const denominator = evaluatePolynomial(convertedFeedback, z);\n          const response = divide(numerator, denominator);\n          magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n          phaseResponse[i] = Math.atan2(response[1], response[0]);\n        }\n      },\n      removeEventListener(...args) {\n        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n      }\n    };\n    return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n  };\n};","map":{"version":3,"names":["computeBufferSize","filterBuffer","interceptConnections","divide","a","b","denominator","multiply","evaluatePolynomial","coefficient","z","result","i","length","createNativeIIRFilterNodeFakerFactory","createInvalidAccessError","createInvalidStateError","createNativeScriptProcessorNode","createNotSupportedError","nativeContext","baseLatency","channelCount","channelCountMode","channelInterpretation","feedback","feedforward","bufferSize","sampleRate","convertedFeedback","Float64Array","convertedFeedforward","feedbackLength","feedforwardLength","minLength","Math","min","scriptProcessorNode","bufferLength","bufferIndexes","xBuffers","yBuffers","push","xBuffer","Float32Array","yBuffer","fill","onaudioprocess","event","inputBuffer","outputBuffer","numberOfChannels","input","getChannelData","output","nyquist","nativeIIRFilterNodeFaker","value","context","inputs","numberOfInputs","numberOfOutputs","addEventListener","args","dispatchEvent","getFrequencyResponse","frequencyHz","magResponse","phaseResponse","omega","PI","cos","sin","numerator","response","sqrt","atan2","removeEventListener"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js"],"sourcesContent":["import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n    const denominator = b[0] * b[0] + b[1] * b[1];\n    return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\nfunction multiply(a, b) {\n    return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\nfunction evaluatePolynomial(coefficient, z) {\n    let result = [0, 0];\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n    }\n    return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n        const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n        const feedbackLength = convertedFeedback.length;\n        const feedforwardLength = convertedFeedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedbackLength === 0 || feedbackLength > 20) {\n            throw createNotSupportedError();\n        }\n        if (convertedFeedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedforwardLength === 0 || feedforwardLength > 20) {\n            throw createNotSupportedError();\n        }\n        if (convertedFeedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (convertedFeedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                convertedFeedforward[i] /= convertedFeedback[0];\n            }\n            for (let i = 1; i < feedbackLength; i += 1) {\n                convertedFeedback[i] /= convertedFeedback[0];\n            }\n        }\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        const bufferLength = 32;\n        const bufferIndexes = [];\n        const xBuffers = [];\n        const yBuffers = [];\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = (event) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n            const numberOfChannels = inputBuffer.numberOfChannels;\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n                bufferIndexes[i] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n            }\n        };\n        const nyquist = nativeContext.sampleRate / 2;\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs() {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args) {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n                if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                    throw createInvalidAccessError();\n                }\n                const length = frequencyHz.length;\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(convertedFeedforward, z);\n                    const denominator = evaluatePolynomial(convertedFeedback, z);\n                    const response = divide(numerator, denominator);\n                    magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n//# sourceMappingURL=native-iir-filter-node-faker-factory.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}