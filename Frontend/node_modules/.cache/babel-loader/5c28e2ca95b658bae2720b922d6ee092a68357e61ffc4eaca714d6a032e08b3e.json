{"ast":null,"code":"export const createDecodeWebMChunk = (readElementContent, readElementType) => {\n  return (dataView, elementType, channelCount) => {\n    const contents = [];\n    let currentElementType = elementType;\n    let offset = 0;\n    while (offset < dataView.byteLength) {\n      if (currentElementType === null) {\n        const lengthAndType = readElementType(dataView, offset);\n        if (lengthAndType === null) {\n          break;\n        }\n        const {\n          length,\n          type\n        } = lengthAndType;\n        currentElementType = type;\n        offset += length;\n      } else {\n        const contentAndLength = readElementContent(dataView, offset, currentElementType, channelCount);\n        if (contentAndLength === null) {\n          break;\n        }\n        const {\n          content,\n          length\n        } = contentAndLength;\n        currentElementType = null;\n        offset += length;\n        if (content !== null) {\n          contents.push(content);\n        }\n      }\n    }\n    return {\n      contents,\n      currentElementType,\n      offset\n    };\n  };\n};","map":{"version":3,"names":["createDecodeWebMChunk","readElementContent","readElementType","dataView","elementType","channelCount","contents","currentElementType","offset","byteLength","lengthAndType","length","type","contentAndLength","content","push"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/extendable-media-recorder/build/es2019/factories/decode-web-m-chunk.js"],"sourcesContent":["export const createDecodeWebMChunk = (readElementContent, readElementType) => {\n    return (dataView, elementType, channelCount) => {\n        const contents = [];\n        let currentElementType = elementType;\n        let offset = 0;\n        while (offset < dataView.byteLength) {\n            if (currentElementType === null) {\n                const lengthAndType = readElementType(dataView, offset);\n                if (lengthAndType === null) {\n                    break;\n                }\n                const { length, type } = lengthAndType;\n                currentElementType = type;\n                offset += length;\n            }\n            else {\n                const contentAndLength = readElementContent(dataView, offset, currentElementType, channelCount);\n                if (contentAndLength === null) {\n                    break;\n                }\n                const { content, length } = contentAndLength;\n                currentElementType = null;\n                offset += length;\n                if (content !== null) {\n                    contents.push(content);\n                }\n            }\n        }\n        return { contents, currentElementType, offset };\n    };\n};\n//# sourceMappingURL=decode-web-m-chunk.js.map"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAGA,CAACC,kBAAkB,EAAEC,eAAe,KAAK;EAC1E,OAAO,CAACC,QAAQ,EAAEC,WAAW,EAAEC,YAAY,KAAK;IAC5C,MAAMC,QAAQ,GAAG,EAAE;IACnB,IAAIC,kBAAkB,GAAGH,WAAW;IACpC,IAAII,MAAM,GAAG,CAAC;IACd,OAAOA,MAAM,GAAGL,QAAQ,CAACM,UAAU,EAAE;MACjC,IAAIF,kBAAkB,KAAK,IAAI,EAAE;QAC7B,MAAMG,aAAa,GAAGR,eAAe,CAACC,QAAQ,EAAEK,MAAM,CAAC;QACvD,IAAIE,aAAa,KAAK,IAAI,EAAE;UACxB;QACJ;QACA,MAAM;UAAEC,MAAM;UAAEC;QAAK,CAAC,GAAGF,aAAa;QACtCH,kBAAkB,GAAGK,IAAI;QACzBJ,MAAM,IAAIG,MAAM;MACpB,CAAC,MACI;QACD,MAAME,gBAAgB,GAAGZ,kBAAkB,CAACE,QAAQ,EAAEK,MAAM,EAAED,kBAAkB,EAAEF,YAAY,CAAC;QAC/F,IAAIQ,gBAAgB,KAAK,IAAI,EAAE;UAC3B;QACJ;QACA,MAAM;UAAEC,OAAO;UAAEH;QAAO,CAAC,GAAGE,gBAAgB;QAC5CN,kBAAkB,GAAG,IAAI;QACzBC,MAAM,IAAIG,MAAM;QAChB,IAAIG,OAAO,KAAK,IAAI,EAAE;UAClBR,QAAQ,CAACS,IAAI,CAACD,OAAO,CAAC;QAC1B;MACJ;IACJ;IACA,OAAO;MAAER,QAAQ;MAAEC,kBAAkB;MAAEC;IAAO,CAAC;EACnD,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}