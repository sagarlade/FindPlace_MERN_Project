{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeGainNodes = new WeakMap();\n    const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeGainNode = getNativeAudioNode(proxy);\n      // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n      if (!nativeGainNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeGainNode.channelCount,\n          channelCountMode: nativeGainNode.channelCountMode,\n          channelInterpretation: nativeGainNode.channelInterpretation,\n          gain: nativeGainNode.gain.value\n        };\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n      if (!nativeGainNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n      return nativeGainNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n        return createGainNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createGainNodeRendererFactory","connectAudioParam","createNativeGainNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeGainNodes","WeakMap","createGainNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativeGainNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","gain","value","set","render","renderedNativeGainNode","get","undefined","Promise","resolve"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=gain-node-renderer-factory.js.map"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AACjE,OAAO,MAAMC,6BAA6B,GAAGA,CAACC,iBAAiB,EAAEC,oBAAoB,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEC,uBAAuB,KAAK;EACrJ,OAAO,MAAM;IACT,MAAMC,uBAAuB,GAAG,IAAIC,OAAO,CAAC,CAAC;IAC7C,MAAMC,cAAc,GAAG,MAAAA,CAAOC,KAAK,EAAEC,yBAAyB,KAAK;MAC/D,IAAIC,cAAc,GAAGR,kBAAkB,CAACM,KAAK,CAAC;MAC9C;MACA,MAAMG,8BAA8B,GAAGb,gBAAgB,CAACY,cAAc,EAAED,yBAAyB,CAAC;MAClG,IAAI,CAACE,8BAA8B,EAAE;QACjC,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,cAAc,CAACG,YAAY;UACzCC,gBAAgB,EAAEJ,cAAc,CAACI,gBAAgB;UACjDC,qBAAqB,EAAEL,cAAc,CAACK,qBAAqB;UAC3DC,IAAI,EAAEN,cAAc,CAACM,IAAI,CAACC;QAC9B,CAAC;QACDP,cAAc,GAAGT,oBAAoB,CAACQ,yBAAyB,EAAEG,OAAO,CAAC;MAC7E;MACAP,uBAAuB,CAACa,GAAG,CAACT,yBAAyB,EAAEC,cAAc,CAAC;MACtE,IAAI,CAACC,8BAA8B,EAAE;QACjC,MAAMR,gBAAgB,CAACM,yBAAyB,EAAED,KAAK,CAACQ,IAAI,EAAEN,cAAc,CAACM,IAAI,CAAC;MACtF,CAAC,MACI;QACD,MAAMhB,iBAAiB,CAACS,yBAAyB,EAAED,KAAK,CAACQ,IAAI,EAAEN,cAAc,CAACM,IAAI,CAAC;MACvF;MACA,MAAMZ,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,cAAc,CAAC;MAC/E,OAAOA,cAAc;IACzB,CAAC;IACD,OAAO;MACHS,MAAMA,CAACX,KAAK,EAAEC,yBAAyB,EAAE;QACrC,MAAMW,sBAAsB,GAAGf,uBAAuB,CAACgB,GAAG,CAACZ,yBAAyB,CAAC;QACrF,IAAIW,sBAAsB,KAAKE,SAAS,EAAE;UACtC,OAAOC,OAAO,CAACC,OAAO,CAACJ,sBAAsB,CAAC;QAClD;QACA,OAAOb,cAAc,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAC3D;IACJ,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}