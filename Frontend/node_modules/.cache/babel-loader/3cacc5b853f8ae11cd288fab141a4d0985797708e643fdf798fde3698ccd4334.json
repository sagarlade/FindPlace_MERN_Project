{"ast":null,"code":"export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n  return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext, numberOfChannels);\n      this._nativeContext = _nativeContext;\n      this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: (moduleURL, options) => {\n          return addAudioWorkletModule(this, moduleURL, options);\n        }\n      };\n    }\n    get audioWorklet() {\n      return this._audioWorklet;\n    }\n    createAnalyser() {\n      return new analyserNodeConstructor(this);\n    }\n    createBiquadFilter() {\n      return new biquadFilterNodeConstructor(this);\n    }\n    createBuffer(numberOfChannels, length, sampleRate) {\n      return new audioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      });\n    }\n    createBufferSource() {\n      return new audioBufferSourceNodeConstructor(this);\n    }\n    createChannelMerger(numberOfInputs = 6) {\n      return new channelMergerNodeConstructor(this, {\n        numberOfInputs\n      });\n    }\n    createChannelSplitter(numberOfOutputs = 6) {\n      return new channelSplitterNodeConstructor(this, {\n        numberOfOutputs\n      });\n    }\n    createConstantSource() {\n      return new constantSourceNodeConstructor(this);\n    }\n    createConvolver() {\n      return new convolverNodeConstructor(this);\n    }\n    createDelay(maxDelayTime = 1) {\n      return new delayNodeConstructor(this, {\n        maxDelayTime\n      });\n    }\n    createDynamicsCompressor() {\n      return new dynamicsCompressorNodeConstructor(this);\n    }\n    createGain() {\n      return new gainNodeConstructor(this);\n    }\n    createIIRFilter(feedforward, feedback) {\n      return new iIRFilterNodeConstructor(this, {\n        feedback,\n        feedforward\n      });\n    }\n    createOscillator() {\n      return new oscillatorNodeConstructor(this);\n    }\n    createPanner() {\n      return new pannerNodeConstructor(this);\n    }\n    createPeriodicWave(real, imag, constraints = {\n      disableNormalization: false\n    }) {\n      return new periodicWaveConstructor(this, {\n        ...constraints,\n        imag,\n        real\n      });\n    }\n    createStereoPanner() {\n      return new stereoPannerNodeConstructor(this);\n    }\n    createWaveShaper() {\n      return new waveShaperNodeConstructor(this);\n    }\n    decodeAudioData(audioData, successCallback, errorCallback) {\n      return decodeAudioData(this._nativeContext, audioData).then(audioBuffer => {\n        if (typeof successCallback === 'function') {\n          successCallback(audioBuffer);\n        }\n        return audioBuffer;\n      }, err => {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        }\n        throw err;\n      });\n    }\n  };\n};","map":{"version":3,"names":["createBaseAudioContextConstructor","addAudioWorkletModule","analyserNodeConstructor","audioBufferConstructor","audioBufferSourceNodeConstructor","biquadFilterNodeConstructor","channelMergerNodeConstructor","channelSplitterNodeConstructor","constantSourceNodeConstructor","convolverNodeConstructor","decodeAudioData","delayNodeConstructor","dynamicsCompressorNodeConstructor","gainNodeConstructor","iIRFilterNodeConstructor","minimalBaseAudioContextConstructor","oscillatorNodeConstructor","pannerNodeConstructor","periodicWaveConstructor","stereoPannerNodeConstructor","waveShaperNodeConstructor","BaseAudioContext","constructor","_nativeContext","numberOfChannels","_audioWorklet","undefined","addModule","moduleURL","options","audioWorklet","createAnalyser","createBiquadFilter","createBuffer","length","sampleRate","createBufferSource","createChannelMerger","numberOfInputs","createChannelSplitter","numberOfOutputs","createConstantSource","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","feedforward","feedback","createOscillator","createPanner","createPeriodicWave","real","imag","constraints","disableNormalization","createStereoPanner","createWaveShaper","audioData","successCallback","errorCallback","then","audioBuffer","err"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js"],"sourcesContent":["export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet =\n                addAudioWorkletModule === undefined\n                    ? undefined\n                    : {\n                        addModule: (moduleURL, options) => {\n                            return addAudioWorkletModule(this, moduleURL, options);\n                        }\n                    };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData).then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            }, (err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err;\n            });\n        }\n    };\n};\n//# sourceMappingURL=base-audio-context-constructor.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}