{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class WaveShaperNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null;\n      // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      this._isCurveNullified = false;\n      this._nativeWaveShaperNode = nativeWaveShaperNode;\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(this, 1);\n    }\n    get curve() {\n      if (this._isCurveNullified) {\n        return null;\n      }\n      return this._nativeWaveShaperNode.curve;\n    }\n    set curve(value) {\n      // Bug #103: Safari does not allow to set the curve to null.\n      if (value === null) {\n        this._isCurveNullified = true;\n        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n      } else {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n        if (value.length < 2) {\n          throw createInvalidStateError();\n        }\n        this._isCurveNullified = false;\n        this._nativeWaveShaperNode.curve = value;\n      }\n    }\n    get oversample() {\n      return this._nativeWaveShaperNode.oversample;\n    }\n    set oversample(value) {\n      this._nativeWaveShaperNode.oversample = value;\n    }\n  };\n};","map":{"version":3,"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","curve","oversample","createWaveShaperNodeConstructor","audioNodeConstructor","createInvalidStateError","createNativeWaveShaperNode","createWaveShaperNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","WaveShaperNode","constructor","context","options","nativeContext","mergedOptions","nativeWaveShaperNode","isOffline","waveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","value","Float32Array","length"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js"],"sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class WaveShaperNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = (isOffline ? createWaveShaperNodeRenderer() : null);\n            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=wave-shaper-node-constructor.js.map"],"mappings":"AAAA,MAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,KAAK;EACvBC,qBAAqB,EAAE,UAAU;EACjCC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE;AAChB,CAAC;AACD,OAAO,MAAMC,+BAA+B,GAAGA,CAACC,oBAAoB,EAAEC,uBAAuB,EAAEC,0BAA0B,EAAEC,4BAA4B,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAEC,oBAAoB,KAAK;EAC7N,OAAO,MAAMC,cAAc,SAASP,oBAAoB,CAAC;IACrDQ,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAE;MAC1B,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAO,CAAC;MAC/C,MAAMG,aAAa,GAAG;QAAE,GAAGnB,eAAe;QAAE,GAAGiB;MAAQ,CAAC;MACxD,MAAMG,oBAAoB,GAAGX,0BAA0B,CAACS,aAAa,EAAEC,aAAa,CAAC;MACrF,MAAME,SAAS,GAAGT,2BAA2B,CAACM,aAAa,CAAC;MAC5D,MAAMI,sBAAsB,GAAID,SAAS,GAAGX,4BAA4B,CAAC,CAAC,GAAG,IAAK;MAClF;MACA,KAAK,CAACM,OAAO,EAAE,IAAI,EAAEI,oBAAoB,EAAEE,sBAAsB,CAAC;MAClE,IAAI,CAACC,iBAAiB,GAAG,KAAK;MAC9B,IAAI,CAACC,qBAAqB,GAAGJ,oBAAoB;MACjD;MACAP,oBAAoB,CAAC,IAAI,EAAE,CAAC,CAAC;IACjC;IACA,IAAIT,KAAKA,CAAA,EAAG;MACR,IAAI,IAAI,CAACmB,iBAAiB,EAAE;QACxB,OAAO,IAAI;MACf;MACA,OAAO,IAAI,CAACC,qBAAqB,CAACpB,KAAK;IAC3C;IACA,IAAIA,KAAKA,CAACqB,KAAK,EAAE;MACb;MACA,IAAIA,KAAK,KAAK,IAAI,EAAE;QAChB,IAAI,CAACF,iBAAiB,GAAG,IAAI;QAC7B,IAAI,CAACC,qBAAqB,CAACpB,KAAK,GAAG,IAAIsB,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC/D,CAAC,MACI;QACD;QACA;QACA,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;UAClB,MAAMnB,uBAAuB,CAAC,CAAC;QACnC;QACA,IAAI,CAACe,iBAAiB,GAAG,KAAK;QAC9B,IAAI,CAACC,qBAAqB,CAACpB,KAAK,GAAGqB,KAAK;MAC5C;IACJ;IACA,IAAIpB,UAAUA,CAAA,EAAG;MACb,OAAO,IAAI,CAACmB,qBAAqB,CAACnB,UAAU;IAChD;IACA,IAAIA,UAAUA,CAACoB,KAAK,EAAE;MAClB,IAAI,CAACD,qBAAqB,CAACnB,UAAU,GAAGoB,KAAK;IACjD;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}