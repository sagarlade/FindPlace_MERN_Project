{"ast":null,"code":"import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {\n  // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n  const CURVE_SIZE = 16385;\n  const DC_CURVE = new Float32Array([1, 1]);\n  const HALF_PI = Math.PI / 2;\n  const SINGLE_CHANNEL_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete'\n  };\n  const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = {\n    ...SINGLE_CHANNEL_OPTIONS,\n    oversample: 'none'\n  };\n  const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n    const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    for (let i = 0; i < CURVE_SIZE; i += 1) {\n      const x = i / (CURVE_SIZE - 1) * HALF_PI;\n      leftWaveShaperCurve[i] = Math.cos(x);\n      rightWaveShaperCurve[i] = Math.sin(x);\n    }\n    const leftGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftWaveShaperCurve\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: DC_CURVE\n    });\n    const rightGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightWaveShaperCurve\n    });\n    return {\n      connectGraph() {\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n      },\n      disconnectGraph() {\n        inputGainNode.disconnect(leftGainNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        inputGainNode.disconnect(rightGainNode);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.disconnect(leftGainNode.gain);\n        rightWaveShaperNode.disconnect(rightGainNode.gain);\n        leftGainNode.disconnect(channelMergerNode, 0, 0);\n        rightGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n    };\n  };\n  const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n    const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const centerIndex = Math.floor(CURVE_SIZE / 2);\n    for (let i = 0; i < CURVE_SIZE; i += 1) {\n      if (i > centerIndex) {\n        const x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n        rightInputForLeftOutputWaveShaperCurve[i] = 0;\n        rightInputForRightOutputWaveShaperCurve[i] = 1;\n      } else {\n        const x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = 1;\n        leftInputForRightOutputWaveShaperCurve[i] = 0;\n        rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n      }\n    }\n    const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: 2,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: 2\n    });\n    const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftInputForLeftOutputWaveShaperCurve\n    });\n    const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftInputForRightOutputWaveShaperCurve\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: DC_CURVE\n    });\n    const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightInputForLeftOutputWaveShaperCurve\n    });\n    const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightInputForRightOutputWaveShaperCurve\n    });\n    return {\n      connectGraph() {\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n      },\n      disconnectGraph() {\n        inputGainNode.disconnect(channelSplitterNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);\n        channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);\n        channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n    };\n  };\n  const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n    if (channelCount === 1) {\n      return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n    if (channelCount === 2) {\n      return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n    throw createNotSupportedError();\n  };\n  return (nativeContext, {\n    channelCount,\n    channelCountMode,\n    pan,\n    ...audioNodeOptions\n  }) => {\n    if (channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n    const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      ...audioNodeOptions,\n      channelCount: 1,\n      channelCountMode,\n      numberOfInputs: 2\n    });\n    const inputGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      channelCount,\n      channelCountMode,\n      gain: 1\n    });\n    const panGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: pan\n    });\n    let {\n      connectGraph,\n      disconnectGraph\n    } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n    Object.defineProperty(panGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(panGainNode.gain, 'maxValue', {\n      get: () => 1\n    });\n    Object.defineProperty(panGainNode.gain, 'minValue', {\n      get: () => -1\n    });\n    const nativeStereoPannerNodeFakerFactory = {\n      get bufferSize() {\n        return undefined;\n      },\n      get channelCount() {\n        return inputGainNode.channelCount;\n      },\n      set channelCount(value) {\n        if (inputGainNode.channelCount !== value) {\n          if (isConnected) {\n            disconnectGraph();\n          }\n          ({\n            connectGraph,\n            disconnectGraph\n          } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));\n          if (isConnected) {\n            connectGraph();\n          }\n        }\n        inputGainNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return inputGainNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        if (value === 'clamped-max' || value === 'max') {\n          throw createNotSupportedError();\n        }\n        inputGainNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return inputGainNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n      },\n      get context() {\n        return inputGainNode.context;\n      },\n      get inputs() {\n        return [inputGainNode];\n      },\n      get numberOfInputs() {\n        return inputGainNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return inputGainNode.numberOfOutputs;\n      },\n      get pan() {\n        return panGainNode.gain;\n      },\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n    };\n    let isConnected = false;\n    const whenConnected = () => {\n      connectGraph();\n      isConnected = true;\n    };\n    const whenDisconnected = () => {\n      disconnectGraph();\n      isConnected = false;\n    };\n    return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"names":["interceptConnections","createNativeStereoPannerNodeFakerFactory","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeGainNode","createNativeWaveShaperNode","createNotSupportedError","monitorConnections","CURVE_SIZE","DC_CURVE","Float32Array","HALF_PI","Math","PI","SINGLE_CHANNEL_OPTIONS","channelCount","channelCountMode","channelInterpretation","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","oversample","buildInternalGraphForMono","nativeContext","inputGainNode","panGainNode","channelMergerNode","leftWaveShaperCurve","rightWaveShaperCurve","i","x","cos","sin","leftGainNode","gain","leftWaveShaperNode","curve","panWaveShaperNode","rightGainNode","rightWaveShaperNode","connectGraph","connect","inputs","undefined","disconnectGraph","disconnect","buildInternalGraphForStereo","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","centerIndex","floor","channelSplitterNode","numberOfOutputs","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraph","pan","audioNodeOptions","numberOfInputs","Object","defineProperty","get","nativeStereoPannerNodeFakerFactory","bufferSize","value","isConnected","context","addEventListener","args","dispatchEvent","removeEventListener","whenConnected","whenDisconnected"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js"],"sourcesContent":["import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' };\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' };\n    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve }));\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE }));\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve }));\n        return {\n            connectGraph() {\n                inputGainNode.connect(leftGainNode);\n                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                inputGainNode.connect(rightGainNode);\n                panWaveShaperNode.connect(panGainNode);\n                panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n                leftWaveShaperNode.connect(leftGainNode.gain);\n                rightWaveShaperNode.connect(rightGainNode.gain);\n                leftGainNode.connect(channelMergerNode, 0, 0);\n                rightGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph() {\n                inputGainNode.disconnect(leftGainNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                inputGainNode.disconnect(rightGainNode);\n                panWaveShaperNode.disconnect(panGainNode);\n                panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n                leftWaveShaperNode.disconnect(leftGainNode.gain);\n                rightWaveShaperNode.disconnect(rightGainNode.gain);\n                leftGainNode.disconnect(channelMergerNode, 0, 0);\n                rightGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            }\n            else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: leftInputForLeftOutputWaveShaperCurve\n        });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: leftInputForRightOutputWaveShaperCurve\n        });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE }));\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: rightInputForLeftOutputWaveShaperCurve\n        });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: rightInputForRightOutputWaveShaperCurve\n        });\n        return {\n            connectGraph() {\n                inputGainNode.connect(channelSplitterNode);\n                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);\n                channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);\n                channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n                panWaveShaperNode.connect(panGainNode);\n                panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === undefined\n                    ? leftInputForLeftOutputWaveShaperNode\n                    : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === undefined\n                    ? leftInputForRightOutputWaveShaperNode\n                    : leftInputForRightOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === undefined\n                    ? rightInputForLeftOutputWaveShaperNode\n                    : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === undefined\n                    ? rightInputForRightOutputWaveShaperNode\n                    : rightInputForRightOutputWaveShaperNode.inputs[0]);\n                leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n                leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph() {\n                inputGainNode.disconnect(channelSplitterNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);\n                channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);\n                channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n                panWaveShaperNode.disconnect(panGainNode);\n                panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === undefined\n                    ? leftInputForLeftOutputWaveShaperNode\n                    : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === undefined\n                    ? leftInputForRightOutputWaveShaperNode\n                    : leftInputForRightOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === undefined\n                    ? rightInputForLeftOutputWaveShaperNode\n                    : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === undefined\n                    ? rightInputForRightOutputWaveShaperNode\n                    : rightInputForRightOutputWaveShaperNode.inputs[0]);\n                leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n                leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        throw createNotSupportedError();\n    };\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n        let { connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(panGainNode.gain, 'maxValue', { get: () => 1 });\n        Object.defineProperty(panGainNode.gain, 'minValue', { get: () => -1 });\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    if (isConnected) {\n                        disconnectGraph();\n                    }\n                    ({ connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));\n                    if (isConnected) {\n                        connectGraph();\n                    }\n                }\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return inputGainNode.context;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan() {\n                return panGainNode.gain;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        let isConnected = false;\n        const whenConnected = () => {\n            connectGraph();\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            disconnectGraph();\n            isConnected = false;\n        };\n        return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-stereo-panner-node-faker-factory.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}