{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n    const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeOscillatorNode = getNativeAudioNode(proxy);\n      // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeOscillatorNode.channelCount,\n          channelCountMode: nativeOscillatorNode.channelCountMode,\n          channelInterpretation: nativeOscillatorNode.channelInterpretation,\n          detune: nativeOscillatorNode.detune.value,\n          frequency: nativeOscillatorNode.frequency.value,\n          periodicWave: periodicWave === null ? undefined : periodicWave,\n          type: nativeOscillatorNode.type\n        };\n        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n        if (start !== null) {\n          nativeOscillatorNode.start(start);\n        }\n        if (stop !== null) {\n          nativeOscillatorNode.stop(stop);\n        }\n      }\n      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n      return nativeOscillatorNode;\n    };\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n        return createOscillatorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createOscillatorNodeRendererFactory","connectAudioParam","createNativeOscillatorNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeOscillatorNodes","WeakMap","periodicWave","start","stop","createOscillatorNode","proxy","nativeOfflineAudioContext","nativeOscillatorNode","nativeOscillatorNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","detune","value","frequency","undefined","type","set","render","renderedNativeOscillatorNode","get","Promise","resolve"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=oscillator-node-renderer-factory.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}