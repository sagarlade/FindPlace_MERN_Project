{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class DynamicsCompressorNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n      super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n      this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);\n      this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);\n      this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n      this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);\n      this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);\n      this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);\n      setAudioNodeTailTime(this, 0.006);\n    }\n    get attack() {\n      return this._attack;\n    }\n    // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n    get channelCount() {\n      return this._nativeDynamicsCompressorNode.channelCount;\n    }\n    set channelCount(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n      this._nativeDynamicsCompressorNode.channelCount = value;\n      if (value > 2) {\n        this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n    /*\n     * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n     * overwritten here.\n     */\n    get channelCountMode() {\n      return this._nativeDynamicsCompressorNode.channelCountMode;\n    }\n    set channelCountMode(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n      this._nativeDynamicsCompressorNode.channelCountMode = value;\n      if (value === 'max') {\n        this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n    get knee() {\n      return this._knee;\n    }\n    get ratio() {\n      return this._ratio;\n    }\n    get reduction() {\n      // Bug #111: Safari returns an AudioParam instead of a number.\n      if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n        return this._nativeDynamicsCompressorNode.reduction.value;\n      }\n      return this._nativeDynamicsCompressorNode.reduction;\n    }\n    get release() {\n      return this._release;\n    }\n    get threshold() {\n      return this._threshold;\n    }\n  };\n};","map":{"version":3,"names":["DEFAULT_OPTIONS","attack","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","createDynamicsCompressorNodeConstructor","audioNodeConstructor","createAudioParam","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","createNotSupportedError","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","DynamicsCompressorNode","constructor","context","options","nativeContext","mergedOptions","nativeDynamicsCompressorNode","isOffline","dynamicsCompressorNodeRenderer","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","value","previousChannelCount","reduction"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js"],"sourcesContent":["const DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class DynamicsCompressorNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = (isOffline ? createDynamicsCompressorNodeRenderer() : null);\n            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);\n            setAudioNodeTailTime(this, 0.006);\n        }\n        get attack() {\n            return this._attack;\n        }\n        // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=dynamics-compressor-node-constructor.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}