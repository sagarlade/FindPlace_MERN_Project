{"ast":null,"code":"import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections) => {\n  return (nativeContext, {\n    curve,\n    oversample,\n    ...audioNodeOptions\n  }) => {\n    const negativeWaveShaperNode = nativeContext.createWaveShaper();\n    const positiveWaveShaperNode = nativeContext.createWaveShaper();\n    assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n    assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n    const inputGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: 1\n    });\n    const invertGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: -1\n    });\n    const outputGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: 1\n    });\n    const revertGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: -1\n    });\n    let disconnectNativeAudioBufferSourceNode = null;\n    let isConnected = false;\n    let unmodifiedCurve = null;\n    const nativeWaveShaperNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n      get channelCount() {\n        return negativeWaveShaperNode.channelCount;\n      },\n      set channelCount(value) {\n        inputGainNode.channelCount = value;\n        invertGainNode.channelCount = value;\n        negativeWaveShaperNode.channelCount = value;\n        outputGainNode.channelCount = value;\n        positiveWaveShaperNode.channelCount = value;\n        revertGainNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return negativeWaveShaperNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        inputGainNode.channelCountMode = value;\n        invertGainNode.channelCountMode = value;\n        negativeWaveShaperNode.channelCountMode = value;\n        outputGainNode.channelCountMode = value;\n        positiveWaveShaperNode.channelCountMode = value;\n        revertGainNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return negativeWaveShaperNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        invertGainNode.channelInterpretation = value;\n        negativeWaveShaperNode.channelInterpretation = value;\n        outputGainNode.channelInterpretation = value;\n        positiveWaveShaperNode.channelInterpretation = value;\n        revertGainNode.channelInterpretation = value;\n      },\n      get context() {\n        return negativeWaveShaperNode.context;\n      },\n      get curve() {\n        return unmodifiedCurve;\n      },\n      set curve(value) {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        if (value !== null && value.length < 2) {\n          throw createInvalidStateError();\n        }\n        if (value === null) {\n          negativeWaveShaperNode.curve = value;\n          positiveWaveShaperNode.curve = value;\n        } else {\n          const curveLength = value.length;\n          const negativeCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n          const positiveCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n          negativeCurve[0] = value[0];\n          positiveCurve[0] = -value[curveLength - 1];\n          const length = Math.ceil((curveLength + 1) / 2);\n          const centerIndex = (curveLength + 1) / 2 - 1;\n          for (let i = 1; i < length; i += 1) {\n            const theoreticIndex = i / length * centerIndex;\n            const lowerIndex = Math.floor(theoreticIndex);\n            const upperIndex = Math.ceil(theoreticIndex);\n            negativeCurve[i] = lowerIndex === upperIndex ? value[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * value[upperIndex];\n            positiveCurve[i] = lowerIndex === upperIndex ? -value[curveLength - 1 - lowerIndex] : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) - (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];\n          }\n          negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n          negativeWaveShaperNode.curve = negativeCurve;\n          positiveWaveShaperNode.curve = positiveCurve;\n        }\n        unmodifiedCurve = value;\n        if (isConnected) {\n          if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n          } else if (disconnectNativeAudioBufferSourceNode !== null) {\n            disconnectNativeAudioBufferSourceNode();\n            disconnectNativeAudioBufferSourceNode = null;\n          }\n        }\n      },\n      get inputs() {\n        return [inputGainNode];\n      },\n      get numberOfInputs() {\n        return negativeWaveShaperNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return negativeWaveShaperNode.numberOfOutputs;\n      },\n      get oversample() {\n        return negativeWaveShaperNode.oversample;\n      },\n      set oversample(value) {\n        negativeWaveShaperNode.oversample = value;\n        positiveWaveShaperNode.oversample = value;\n      },\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n    };\n    if (curve !== null) {\n      // Only values of type Float32Array can be assigned to the curve property.\n      nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);\n    }\n    if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n      nativeWaveShaperNodeFaker.oversample = oversample;\n    }\n    const whenConnected = () => {\n      inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);\n      inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);\n      isConnected = true;\n      if (isDCCurve(unmodifiedCurve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n      }\n    };\n    const whenDisconnected = () => {\n      inputGainNode.disconnect(negativeWaveShaperNode);\n      negativeWaveShaperNode.disconnect(outputGainNode);\n      inputGainNode.disconnect(invertGainNode);\n      invertGainNode.disconnect(positiveWaveShaperNode);\n      positiveWaveShaperNode.disconnect(revertGainNode);\n      revertGainNode.disconnect(outputGainNode);\n      isConnected = false;\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n    return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"names":["assignNativeAudioNodeOptions","interceptConnections","createNativeWaveShaperNodeFakerFactory","createConnectedNativeAudioBufferSourceNode","createInvalidStateError","createNativeGainNode","isDCCurve","monitorConnections","nativeContext","curve","oversample","audioNodeOptions","negativeWaveShaperNode","createWaveShaper","positiveWaveShaperNode","inputGainNode","gain","invertGainNode","outputGainNode","revertGainNode","disconnectNativeAudioBufferSourceNode","isConnected","unmodifiedCurve","nativeWaveShaperNodeFaker","bufferSize","undefined","channelCount","value","channelCountMode","channelInterpretation","context","length","curveLength","negativeCurve","Float32Array","positiveCurve","Math","ceil","centerIndex","i","theoreticIndex","lowerIndex","floor","upperIndex","inputs","numberOfInputs","numberOfOutputs","addEventListener","args","dispatchEvent","removeEventListener","whenConnected","connect","whenDisconnected","disconnect"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js"],"sourcesContent":["import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections) => {\n    return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {\n        const negativeWaveShaperNode = nativeContext.createWaveShaper();\n        const positiveWaveShaperNode = nativeContext.createWaveShaper();\n        assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n        assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        let disconnectNativeAudioBufferSourceNode = null;\n        let isConnected = false;\n        let unmodifiedCurve = null;\n        const nativeWaveShaperNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return negativeWaveShaperNode.channelCount;\n            },\n            set channelCount(value) {\n                inputGainNode.channelCount = value;\n                invertGainNode.channelCount = value;\n                negativeWaveShaperNode.channelCount = value;\n                outputGainNode.channelCount = value;\n                positiveWaveShaperNode.channelCount = value;\n                revertGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return negativeWaveShaperNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                inputGainNode.channelCountMode = value;\n                invertGainNode.channelCountMode = value;\n                negativeWaveShaperNode.channelCountMode = value;\n                outputGainNode.channelCountMode = value;\n                positiveWaveShaperNode.channelCountMode = value;\n                revertGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return negativeWaveShaperNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                invertGainNode.channelInterpretation = value;\n                negativeWaveShaperNode.channelInterpretation = value;\n                outputGainNode.channelInterpretation = value;\n                positiveWaveShaperNode.channelInterpretation = value;\n                revertGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return negativeWaveShaperNode.context;\n            },\n            get curve() {\n                return unmodifiedCurve;\n            },\n            set curve(value) {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                if (value !== null && value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                if (value === null) {\n                    negativeWaveShaperNode.curve = value;\n                    positiveWaveShaperNode.curve = value;\n                }\n                else {\n                    const curveLength = value.length;\n                    const negativeCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    const positiveCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    negativeCurve[0] = value[0];\n                    positiveCurve[0] = -value[curveLength - 1];\n                    const length = Math.ceil((curveLength + 1) / 2);\n                    const centerIndex = (curveLength + 1) / 2 - 1;\n                    for (let i = 1; i < length; i += 1) {\n                        const theoreticIndex = (i / length) * centerIndex;\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        negativeCurve[i] =\n                            lowerIndex === upperIndex\n                                ? value[lowerIndex]\n                                : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] +\n                                    (1 - (upperIndex - theoreticIndex)) * value[upperIndex];\n                        positiveCurve[i] =\n                            lowerIndex === upperIndex\n                                ? -value[curveLength - 1 - lowerIndex]\n                                : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) -\n                                    (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];\n                    }\n                    negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n                    negativeWaveShaperNode.curve = negativeCurve;\n                    positiveWaveShaperNode.curve = positiveCurve;\n                }\n                unmodifiedCurve = value;\n                if (isConnected) {\n                    if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n                        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n                    }\n                    else if (disconnectNativeAudioBufferSourceNode !== null) {\n                        disconnectNativeAudioBufferSourceNode();\n                        disconnectNativeAudioBufferSourceNode = null;\n                    }\n                }\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return negativeWaveShaperNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return negativeWaveShaperNode.numberOfOutputs;\n            },\n            get oversample() {\n                return negativeWaveShaperNode.oversample;\n            },\n            set oversample(value) {\n                negativeWaveShaperNode.oversample = value;\n                positiveWaveShaperNode.oversample = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (curve !== null) {\n            // Only values of type Float32Array can be assigned to the curve property.\n            nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);\n        }\n        if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n            nativeWaveShaperNodeFaker.oversample = oversample;\n        }\n        const whenConnected = () => {\n            inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);\n            inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);\n            isConnected = true;\n            if (isDCCurve(unmodifiedCurve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n            }\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(negativeWaveShaperNode);\n            negativeWaveShaperNode.disconnect(outputGainNode);\n            inputGainNode.disconnect(invertGainNode);\n            invertGainNode.disconnect(positiveWaveShaperNode);\n            positiveWaveShaperNode.disconnect(revertGainNode);\n            revertGainNode.disconnect(outputGainNode);\n            isConnected = false;\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n        return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-wave-shaper-node-faker-factory.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}