{"ast":null,"code":"import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConstantSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n    const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeConstantSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n      const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeConstantSourceNode.channelCount,\n          channelCountMode: nativeConstantSourceNode.channelCountMode,\n          channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n          offset: nativeConstantSourceNode.offset.value\n        };\n        nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n        if (start !== null) {\n          nativeConstantSourceNode.start(start);\n        }\n        if (stop !== null) {\n          nativeConstantSourceNode.stop(stop);\n        }\n      }\n      renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n      return nativeConstantSourceNode;\n    };\n    return {\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"names":["isOwnedByContext","createConstantSourceNodeRendererFactory","connectAudioParam","createNativeConstantSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeConstantSourceNodes","WeakMap","start","stop","createConstantSourceNode","proxy","nativeOfflineAudioContext","nativeConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","offset","value","set","render","renderedNativeConstantSourceNode","get","undefined","Promise","resolve"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js"],"sourcesContent":["import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=constant-source-node-renderer-factory.js.map"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AACjE,OAAO,MAAMC,uCAAuC,GAAGA,CAACC,iBAAiB,EAAEC,8BAA8B,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEC,uBAAuB,KAAK;EACzK,OAAO,MAAM;IACT,MAAMC,iCAAiC,GAAG,IAAIC,OAAO,CAAC,CAAC;IACvD,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIC,IAAI,GAAG,IAAI;IACf,MAAMC,wBAAwB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,yBAAyB,KAAK;MACzE,IAAIC,wBAAwB,GAAGV,kBAAkB,CAACQ,KAAK,CAAC;MACxD;AACZ;AACA;AACA;MACY,MAAMG,wCAAwC,GAAGf,gBAAgB,CAACc,wBAAwB,EAAED,yBAAyB,CAAC;MACtH,IAAI,CAACE,wCAAwC,EAAE;QAC3C,MAAMC,OAAO,GAAG;UACZC,YAAY,EAAEH,wBAAwB,CAACG,YAAY;UACnDC,gBAAgB,EAAEJ,wBAAwB,CAACI,gBAAgB;UAC3DC,qBAAqB,EAAEL,wBAAwB,CAACK,qBAAqB;UACrEC,MAAM,EAAEN,wBAAwB,CAACM,MAAM,CAACC;QAC5C,CAAC;QACDP,wBAAwB,GAAGX,8BAA8B,CAACU,yBAAyB,EAAEG,OAAO,CAAC;QAC7F,IAAIP,KAAK,KAAK,IAAI,EAAE;UAChBK,wBAAwB,CAACL,KAAK,CAACA,KAAK,CAAC;QACzC;QACA,IAAIC,IAAI,KAAK,IAAI,EAAE;UACfI,wBAAwB,CAACJ,IAAI,CAACA,IAAI,CAAC;QACvC;MACJ;MACAH,iCAAiC,CAACe,GAAG,CAACT,yBAAyB,EAAEC,wBAAwB,CAAC;MAC1F,IAAI,CAACC,wCAAwC,EAAE;QAC3C,MAAMV,gBAAgB,CAACQ,yBAAyB,EAAED,KAAK,CAACQ,MAAM,EAAEN,wBAAwB,CAACM,MAAM,CAAC;MACpG,CAAC,MACI;QACD,MAAMlB,iBAAiB,CAACW,yBAAyB,EAAED,KAAK,CAACQ,MAAM,EAAEN,wBAAwB,CAACM,MAAM,CAAC;MACrG;MACA,MAAMd,uBAAuB,CAACM,KAAK,EAAEC,yBAAyB,EAAEC,wBAAwB,CAAC;MACzF,OAAOA,wBAAwB;IACnC,CAAC;IACD,OAAO;MACH,IAAIL,KAAKA,CAACY,KAAK,EAAE;QACbZ,KAAK,GAAGY,KAAK;MACjB,CAAC;MACD,IAAIX,IAAIA,CAACW,KAAK,EAAE;QACZX,IAAI,GAAGW,KAAK;MAChB,CAAC;MACDE,MAAMA,CAACX,KAAK,EAAEC,yBAAyB,EAAE;QACrC,MAAMW,gCAAgC,GAAGjB,iCAAiC,CAACkB,GAAG,CAACZ,yBAAyB,CAAC;QACzG,IAAIW,gCAAgC,KAAKE,SAAS,EAAE;UAChD,OAAOC,OAAO,CAACC,OAAO,CAACJ,gCAAgC,CAAC;QAC5D;QACA,OAAOb,wBAAwB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MACrE;IACJ,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}