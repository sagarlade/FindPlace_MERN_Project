{"ast":null,"code":"import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n  return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(options = {}) {\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n      let nativeAudioContext;\n      try {\n        nativeAudioContext = new nativeAudioContextConstructor(options);\n      } catch (err) {\n        // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n        if (err.code === 12 && err.message === 'sampleRate is not in range') {\n          throw createNotSupportedError();\n        }\n        throw err;\n      }\n      // Bug #131 Safari returns null when there are four other AudioContexts running already.\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      }\n      // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      }\n      // Bug #150 Safari does not support setting the sampleRate.\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n      super(nativeAudioContext, 2);\n      const {\n        latencyHint\n      } = options;\n      const {\n        sampleRate\n      } = nativeAudioContext;\n      // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext;\n      // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n      if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n        this._nativeGainNode = nativeAudioContext.createGain();\n        this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n        this._nativeGainNode.gain.value = 1e-37;\n        this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n        this._nativeOscillatorNode.start();\n      } else {\n        this._nativeGainNode = null;\n        this._nativeOscillatorNode = null;\n      }\n      this._state = null;\n      /*\n       * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n       * to 'running'.\n       */\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n    get baseLatency() {\n      return this._baseLatency;\n    }\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      }\n      // Bug #34: If the state was set to suspended before it should be revoked now.\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n      return this._nativeAudioContext.close().then(() => {\n        if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n          this._nativeOscillatorNode.stop();\n          this._nativeGainNode.disconnect();\n          this._nativeOscillatorNode.disconnect();\n        }\n        deactivateAudioGraph(this);\n      });\n    }\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n        throw err;\n      });\n    }\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n        throw err;\n      });\n    }\n  };\n};","map":{"version":3,"names":["deactivateAudioGraph","isValidLatencyHint","createMinimalAudioContextConstructor","createInvalidStateError","createNotSupportedError","createUnknownError","minimalBaseAudioContextConstructor","nativeAudioContextConstructor","MinimalAudioContext","constructor","options","Error","nativeAudioContext","err","code","message","latencyHint","TypeError","sampleRate","undefined","_baseLatency","baseLatency","Math","max","min","round","_nativeAudioContext","name","_nativeGainNode","createGain","_nativeOscillatorNode","createOscillator","gain","value","connect","destination","start","_state","state","revokeState","removeEventListener","addEventListener","close","then","stop","disconnect","resume","Promise","resolve","reject","resolvePromise","catch","suspend"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js"],"sourcesContent":["import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            let nativeAudioContext;\n            try {\n                nativeAudioContext = new nativeAudioContextConstructor(options);\n            }\n            catch (err) {\n                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n                if (err.code === 12 && err.message === 'sampleRate is not in range') {\n                    throw createNotSupportedError();\n                }\n                throw err;\n            }\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Safari does not support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, 2);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency =\n                typeof nativeAudioContext.baseLatency === 'number'\n                    ? nativeAudioContext.baseLatency\n                    : latencyHint === 'balanced'\n                        ? 512 / sampleRate\n                        : latencyHint === 'interactive' || latencyHint === undefined\n                            ? 256 / sampleRate\n                            : latencyHint === 'playback'\n                                ? 1024 / sampleRate\n                                : /*\n                                   * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                                   * ScriptProcessorNode.\n                                   */\n                                    (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;\n            this._nativeAudioContext = nativeAudioContext;\n            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                this._nativeGainNode = nativeAudioContext.createGain();\n                this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n                this._nativeGainNode.gain.value = 1e-37;\n                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n                this._nativeOscillatorNode.start();\n            }\n            else {\n                this._nativeGainNode = null;\n                this._nativeOscillatorNode = null;\n            }\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext.close().then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close().then(() => {\n                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n                    this._nativeOscillatorNode.stop();\n                    this._nativeGainNode.disconnect();\n                    this._nativeOscillatorNode.disconnect();\n                }\n                deactivateAudioGraph(this);\n            });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this.resume().then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext.resume().catch((err) => {\n                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext.suspend().catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n    };\n};\n//# sourceMappingURL=minimal-audio-context-constructor.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}