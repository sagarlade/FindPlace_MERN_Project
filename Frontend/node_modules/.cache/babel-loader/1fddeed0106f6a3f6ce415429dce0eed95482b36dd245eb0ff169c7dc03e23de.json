{"ast":null,"code":"import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext)\n  /*\n   * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n   * destination.\n   */.then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(audioWorkletNode => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext)))).then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext)).then(audioBuffer => {\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n    if (typeof audioBuffer.copyFromChannel !== 'function') {\n      wrapAudioBufferCopyChannelMethods(audioBuffer);\n      wrapAudioBufferGetChannelDataMethod(audioBuffer);\n      // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n    } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n      wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n    }\n    audioBufferStore.add(audioBuffer);\n    return audioBuffer;\n  });\n};","map":{"version":3,"names":["wrapAudioBufferGetChannelDataMethod","createStartRendering","audioBufferStore","cacheTestResult","getAudioNodeRenderer","getUnrenderedAudioWorkletNodes","renderNativeOfflineAudioContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","destination","nativeOfflineAudioContext","render","then","Promise","all","Array","from","map","audioWorkletNode","audioBuffer","copyFromChannel","add"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js"],"sourcesContent":["import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)\n        .render(destination, nativeOfflineAudioContext)\n        /*\n         * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n         * destination.\n         */\n        .then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map((audioWorkletNode) => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext))))\n        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n        .then((audioBuffer) => {\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n        if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n    });\n};\n//# sourceMappingURL=start-rendering.js.map"],"mappings":"AAAA,SAASA,mCAAmC,QAAQ,sDAAsD;AAC1G,OAAO,MAAMC,oBAAoB,GAAGA,CAACC,gBAAgB,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,8BAA8B,EAAEC,+BAA+B,EAAEC,mDAAmD,EAAEC,iCAAiC,EAAEC,4CAA4C,KAAK;EACpS,OAAO,CAACC,WAAW,EAAEC,yBAAyB,KAAKP,oBAAoB,CAACM,WAAW,CAAC,CAC/EE,MAAM,CAACF,WAAW,EAAEC,yBAAyB;EAC9C;AACR;AACA;AACA,KAHQ,CAICE,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,IAAI,CAACZ,8BAA8B,CAACM,yBAAyB,CAAC,CAAC,CAACO,GAAG,CAAEC,gBAAgB,IAAKf,oBAAoB,CAACe,gBAAgB,CAAC,CAACP,MAAM,CAACO,gBAAgB,EAAER,yBAAyB,CAAC,CAAC,CAAC,CAAC,CACpNE,IAAI,CAAC,MAAMP,+BAA+B,CAACK,yBAAyB,CAAC,CAAC,CACtEE,IAAI,CAAEO,WAAW,IAAK;IACvB;IACA;IACA,IAAI,OAAOA,WAAW,CAACC,eAAe,KAAK,UAAU,EAAE;MACnDb,iCAAiC,CAACY,WAAW,CAAC;MAC9CpB,mCAAmC,CAACoB,WAAW,CAAC;MAChD;IACJ,CAAC,MACI,IAAI,CAACjB,eAAe,CAACI,mDAAmD,EAAE,MAAMA,mDAAmD,CAACa,WAAW,CAAC,CAAC,EAAE;MACpJX,4CAA4C,CAACW,WAAW,CAAC;IAC7D;IACAlB,gBAAgB,CAACoB,GAAG,CAACF,WAAW,CAAC;IACjC,OAAOA,WAAW;EACtB,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}