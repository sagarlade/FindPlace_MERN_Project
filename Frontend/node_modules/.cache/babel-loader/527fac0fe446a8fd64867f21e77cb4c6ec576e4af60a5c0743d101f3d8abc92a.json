{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  delayTime: 0,\n  maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class DelayNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;\n      super(context, false, nativeDelayNode, delayNodeRenderer);\n      this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);\n      setAudioNodeTailTime(this, mergedOptions.maxDelayTime);\n    }\n    get delayTime() {\n      return this._delayTime;\n    }\n  };\n};","map":{"version":3,"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","delayTime","maxDelayTime","createDelayNodeConstructor","audioNodeConstructor","createAudioParam","createDelayNodeRenderer","createNativeDelayNode","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","DelayNode","constructor","context","options","nativeContext","mergedOptions","nativeDelayNode","isOffline","delayNodeRenderer","_delayTime"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js"],"sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class DelayNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = (isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null);\n            super(context, false, nativeDelayNode, delayNodeRenderer);\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);\n            setAudioNodeTailTime(this, mergedOptions.maxDelayTime);\n        }\n        get delayTime() {\n            return this._delayTime;\n        }\n    };\n};\n//# sourceMappingURL=delay-node-constructor.js.map"],"mappings":"AAAA,MAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,KAAK;EACvBC,qBAAqB,EAAE,UAAU;EACjCC,SAAS,EAAE,CAAC;EACZC,YAAY,EAAE;AAClB,CAAC;AACD,OAAO,MAAMC,0BAA0B,GAAGA,CAACC,oBAAoB,EAAEC,gBAAgB,EAAEC,uBAAuB,EAAEC,qBAAqB,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAEC,oBAAoB,KAAK;EACvM,OAAO,MAAMC,SAAS,SAASP,oBAAoB,CAAC;IAChDQ,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAE;MAC1B,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAO,CAAC;MAC/C,MAAMG,aAAa,GAAG;QAAE,GAAGnB,eAAe;QAAE,GAAGiB;MAAQ,CAAC;MACxD,MAAMG,eAAe,GAAGV,qBAAqB,CAACQ,aAAa,EAAEC,aAAa,CAAC;MAC3E,MAAME,SAAS,GAAGT,2BAA2B,CAACM,aAAa,CAAC;MAC5D,MAAMI,iBAAiB,GAAID,SAAS,GAAGZ,uBAAuB,CAACU,aAAa,CAACd,YAAY,CAAC,GAAG,IAAK;MAClG,KAAK,CAACW,OAAO,EAAE,KAAK,EAAEI,eAAe,EAAEE,iBAAiB,CAAC;MACzD,IAAI,CAACC,UAAU,GAAGf,gBAAgB,CAAC,IAAI,EAAEa,SAAS,EAAED,eAAe,CAAChB,SAAS,CAAC;MAC9ES,oBAAoB,CAAC,IAAI,EAAEM,aAAa,CAACd,YAAY,CAAC;IAC1D;IACA,IAAID,SAASA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACmB,UAAU;IAC1B;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}