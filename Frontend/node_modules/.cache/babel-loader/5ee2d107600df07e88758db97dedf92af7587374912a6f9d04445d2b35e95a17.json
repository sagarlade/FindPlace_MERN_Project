{"ast":null,"code":"import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class IIRFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n      const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;\n      super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n      // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n      // @todo Write a test which allows other browsers to remain unpatched.\n      wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n      this._nativeIIRFilterNode = nativeIIRFilterNode;\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(this, 1);\n    }\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n    }\n  };\n};","map":{"version":3,"names":["wrapIIRFilterNodeGetFrequencyResponseMethod","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","createIIRFilterNodeConstructor","audioNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","IIRFilterNode","constructor","context","options","nativeContext","isOffline","mergedOptions","nativeIIRFilterNode","baseLatency","iirFilterNodeRenderer","feedback","feedforward","_nativeIIRFilterNode","getFrequencyResponse","frequencyHz","magResponse","phaseResponse"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js"],"sourcesContent":["import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class IIRFilterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null));\n            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=iir-filter-node-constructor.js.map"],"mappings":"AAAA,SAASA,2CAA2C,QAAQ,+DAA+D;AAC3H,MAAMC,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,KAAK;EACvBC,qBAAqB,EAAE;AAC3B,CAAC;AACD,OAAO,MAAMC,8BAA8B,GAAGA,CAACC,oBAAoB,EAAEC,yBAAyB,EAAEC,2BAA2B,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAEC,oBAAoB,KAAK;EACjM,OAAO,MAAMC,aAAa,SAASN,oBAAoB,CAAC;IACpDO,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAE;MAC1B,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAO,CAAC;MAC/C,MAAMG,SAAS,GAAGP,2BAA2B,CAACM,aAAa,CAAC;MAC5D,MAAME,aAAa,GAAG;QAAE,GAAGjB,eAAe;QAAE,GAAGc;MAAQ,CAAC;MACxD,MAAMI,mBAAmB,GAAGZ,yBAAyB,CAACS,aAAa,EAAEC,SAAS,GAAG,IAAI,GAAGH,OAAO,CAACM,WAAW,EAAEF,aAAa,CAAC;MAC3H,MAAMG,qBAAqB,GAAKJ,SAAS,GAAGT,2BAA2B,CAACU,aAAa,CAACI,QAAQ,EAAEJ,aAAa,CAACK,WAAW,CAAC,GAAG,IAAM;MACnI,KAAK,CAACT,OAAO,EAAE,KAAK,EAAEK,mBAAmB,EAAEE,qBAAqB,CAAC;MACjE;MACA;MACArB,2CAA2C,CAACmB,mBAAmB,CAAC;MAChE,IAAI,CAACK,oBAAoB,GAAGL,mBAAmB;MAC/C;MACAR,oBAAoB,CAAC,IAAI,EAAE,CAAC,CAAC;IACjC;IACAc,oBAAoBA,CAACC,WAAW,EAAEC,WAAW,EAAEC,aAAa,EAAE;MAC1D,OAAO,IAAI,CAACJ,oBAAoB,CAACC,oBAAoB,CAACC,WAAW,EAAEC,WAAW,EAAEC,aAAa,CAAC;IAClG;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}