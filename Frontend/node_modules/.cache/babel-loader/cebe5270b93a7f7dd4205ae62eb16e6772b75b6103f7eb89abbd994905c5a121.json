{"ast":null,"code":"// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isEmittingMessageEvents = false;\n    let isEmittingProcessorErrorEvents = false;\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n      audioWorkletNode.port.onmessage = () => isEmittingMessageEvents = true;\n      audioWorkletNode.onprocessorerror = () => isEmittingProcessorErrorEvents = true;\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      await offlineAudioContext.startRendering();\n      // Bug #197: Safari does not deliver the messages before the promise returned by startRendering() resolves.\n      await new Promise(resolve => setTimeout(resolve));\n    } catch {\n      // Ignore errors.\n    } finally {\n      URL.revokeObjectURL(url);\n    }\n    return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n  };\n};","map":{"version":3,"names":["createTestAudioWorkletProcessorPostMessageSupport","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","blob","Blob","type","offlineAudioContext","url","URL","createObjectURL","isEmittingMessageEvents","isEmittingProcessorErrorEvents","audioWorklet","addModule","audioWorkletNode","numberOfOutputs","oscillator","createOscillator","port","onmessage","onprocessorerror","connect","start","startRendering","Promise","resolve","setTimeout","revokeObjectURL"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js"],"sourcesContent":["// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n            type: 'application/javascript; charset=utf-8'\n        });\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n        let isEmittingMessageEvents = false;\n        let isEmittingProcessorErrorEvents = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n            audioWorkletNode.port.onmessage = () => (isEmittingMessageEvents = true);\n            audioWorkletNode.onprocessorerror = () => (isEmittingProcessorErrorEvents = true);\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n            await offlineAudioContext.startRendering();\n            // Bug #197: Safari does not deliver the messages before the promise returned by startRendering() resolves.\n            await new Promise((resolve) => setTimeout(resolve));\n        }\n        catch {\n            // Ignore errors.\n        }\n        finally {\n            URL.revokeObjectURL(url);\n        }\n        return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n    };\n};\n//# sourceMappingURL=test-audio-worklet-processor-post-message-support.js.map"],"mappings":"AAAA;AACA,OAAO,MAAMA,iDAAiD,GAAGA,CAACC,iCAAiC,EAAEC,oCAAoC,KAAK;EAC1I,OAAO,YAAY;IACf;IACA,IAAID,iCAAiC,KAAK,IAAI,EAAE;MAC5C,OAAO,IAAI;IACf;IACA,IAAIC,oCAAoC,KAAK,IAAI,EAAE;MAC/C,OAAO,KAAK;IAChB;IACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,sHAAsH,CAAC,EAAE;MAC5IC,IAAI,EAAE;IACV,CAAC,CAAC;IACF;IACA,MAAMC,mBAAmB,GAAG,IAAIJ,oCAAoC,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;IACnF,MAAMK,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;IACrC,IAAIO,uBAAuB,GAAG,KAAK;IACnC,IAAIC,8BAA8B,GAAG,KAAK;IAC1C,IAAI;MACA,MAAML,mBAAmB,CAACM,YAAY,CAACC,SAAS,CAACN,GAAG,CAAC;MACrD,MAAMO,gBAAgB,GAAG,IAAIb,iCAAiC,CAACK,mBAAmB,EAAE,GAAG,EAAE;QAAES,eAAe,EAAE;MAAE,CAAC,CAAC;MAChH,MAAMC,UAAU,GAAGV,mBAAmB,CAACW,gBAAgB,CAAC,CAAC;MACzDH,gBAAgB,CAACI,IAAI,CAACC,SAAS,GAAG,MAAOT,uBAAuB,GAAG,IAAK;MACxEI,gBAAgB,CAACM,gBAAgB,GAAG,MAAOT,8BAA8B,GAAG,IAAK;MACjFK,UAAU,CAACK,OAAO,CAACP,gBAAgB,CAAC;MACpCE,UAAU,CAACM,KAAK,CAAC,CAAC,CAAC;MACnB,MAAMhB,mBAAmB,CAACiB,cAAc,CAAC,CAAC;MAC1C;MACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,CAAC,CAAC;IACvD,CAAC,CACD,MAAM;MACF;IAAA,CACH,SACO;MACJjB,GAAG,CAACmB,eAAe,CAACpB,GAAG,CAAC;IAC5B;IACA,OAAOG,uBAAuB,IAAI,CAACC,8BAA8B;EACrE,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}