{"ast":null,"code":"import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  numberOfInputs: 1,\n  numberOfOutputs: 1,\n  parameterData: {},\n  processorOptions: {}\n};\nexport const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) => {\n  return class AudioWorkletNode extends audioNodeConstructor {\n    constructor(context, name, options) {\n      var _a;\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = sanitizeAudioWorkletNodeOptions({\n        ...DEFAULT_OPTIONS,\n        ...options\n      });\n      // Bug #191: Safari doesn't throw an error if the options aren't clonable.\n      testAudioWorkletNodeOptionsClonability(mergedOptions);\n      const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n      const processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name);\n      // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n      const nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed' ? nativeContext : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;\n      const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n      const audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null;\n      /*\n       * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n       * returns false.\n       */\n      super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n      const parameters = [];\n      nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n        const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n        parameters.push([nm, audioParam]);\n      });\n      this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n      this._onprocessorerror = null;\n      this._parameters = new ReadOnlyMap(parameters);\n      /*\n       * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n       * the destination.\n       */\n      if (isOffline) {\n        addUnrenderedAudioWorkletNode(nativeContext, this);\n      }\n      const {\n        activeInputs\n      } = getAudioNodeConnections(this);\n      setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);\n    }\n    get onprocessorerror() {\n      return this._onprocessorerror;\n    }\n    set onprocessorerror(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n      const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n      this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value : nativeOnProcessorError;\n    }\n    get parameters() {\n      if (this._parameters === null) {\n        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n        return this._nativeAudioWorkletNode.parameters;\n      }\n      return this._parameters;\n    }\n    get port() {\n      return this._nativeAudioWorkletNode.port;\n    }\n  };\n};","map":{"version":3,"names":["NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","ReadOnlyMap","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","numberOfInputs","numberOfOutputs","parameterData","processorOptions","createAudioWorkletNodeConstructor","addUnrenderedAudioWorkletNode","audioNodeConstructor","createAudioParam","createAudioWorkletNodeRenderer","createNativeAudioWorkletNode","getAudioNodeConnections","getBackupOfflineAudioContext","getNativeContext","isNativeOfflineAudioContext","nativeAudioWorkletNodeConstructor","sanitizeAudioWorkletNodeOptions","setActiveAudioWorkletNodeInputs","testAudioWorkletNodeOptionsClonability","wrapEventListener","AudioWorkletNode","constructor","context","name","options","_a","nativeContext","isOffline","mergedOptions","nodeNameToProcessorConstructorMap","get","processorConstructor","nativeContextOrBackupOfflineAudioContext","state","nativeAudioWorkletNode","baseLatency","audioWorkletNodeRenderer","parameters","forEach","nativeAudioParam","nm","audioParam","push","_nativeAudioWorkletNode","_onprocessorerror","_parameters","activeInputs","onprocessorerror","value","wrappedListener","nativeOnProcessorError","port"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js"],"sourcesContent":["import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 1,\n    numberOfOutputs: 1,\n    parameterData: {},\n    processorOptions: {}\n};\nexport const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) => {\n    return class AudioWorkletNode extends audioNodeConstructor {\n        constructor(context, name, options) {\n            var _a;\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = sanitizeAudioWorkletNodeOptions({ ...DEFAULT_OPTIONS, ...options });\n            // Bug #191: Safari doesn't throw an error if the options aren't clonable.\n            testAudioWorkletNodeOptionsClonability(mergedOptions);\n            const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n            const processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name);\n            // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n            const nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed'\n                ? nativeContext\n                : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;\n            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n            const audioWorkletNodeRenderer = ((isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null));\n            /*\n             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n             * returns false.\n             */\n            super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n            const parameters = [];\n            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n                parameters.push([nm, audioParam]);\n            });\n            this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n            this._onprocessorerror = null;\n            this._parameters = new ReadOnlyMap(parameters);\n            /*\n             * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n             * the destination.\n             */\n            if (isOffline) {\n                addUnrenderedAudioWorkletNode(nativeContext, this);\n            }\n            const { activeInputs } = getAudioNodeConnections(this);\n            setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);\n        }\n        get onprocessorerror() {\n            return this._onprocessorerror;\n        }\n        set onprocessorerror(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n            this._onprocessorerror =\n                nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener\n                    ? value\n                    : nativeOnProcessorError;\n        }\n        get parameters() {\n            if (this._parameters === null) {\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                return this._nativeAudioWorkletNode.parameters;\n            }\n            return this._parameters;\n        }\n        get port() {\n            return this._nativeAudioWorkletNode.port;\n        }\n    };\n};\n//# sourceMappingURL=audio-worklet-node-constructor.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}