{"ast":null,"code":"/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const blob = new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    const messageChannel = new MessageChannel();\n    // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isCallingProcess = false;\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n      await new Promise(resolve => {\n        audioWorkletNode.port.onmessage = () => resolve();\n        audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n      });\n      audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      await offlineAudioContext.startRendering();\n      isCallingProcess = await new Promise(resolve => {\n        messageChannel.port1.onmessage = ({\n          data\n        }) => resolve(data === 1);\n        messageChannel.port1.postMessage(0);\n      });\n    } catch {\n      // Ignore errors.\n    } finally {\n      messageChannel.port1.close();\n      URL.revokeObjectURL(url);\n    }\n    return isCallingProcess;\n  };\n};","map":{"version":3,"names":["createTestAudioWorkletProcessorNoOutputsSupport","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","blob","Blob","type","messageChannel","MessageChannel","offlineAudioContext","url","URL","createObjectURL","isCallingProcess","audioWorklet","addModule","audioWorkletNode","numberOfOutputs","oscillator","createOscillator","Promise","resolve","port","onmessage","postMessage","port2","connect","start","startRendering","port1","data","close","revokeObjectURL"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js"],"sourcesContent":["/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob([\n            'let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'\n        ], {\n            type: 'application/javascript; charset=utf-8'\n        });\n        const messageChannel = new MessageChannel();\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n        let isCallingProcess = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n            await new Promise((resolve) => {\n                audioWorkletNode.port.onmessage = () => resolve();\n                audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n            });\n            audioWorkletNode.port.onmessage = () => (isCallingProcess = true);\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n            await offlineAudioContext.startRendering();\n            isCallingProcess = await new Promise((resolve) => {\n                messageChannel.port1.onmessage = ({ data }) => resolve(data === 1);\n                messageChannel.port1.postMessage(0);\n            });\n        }\n        catch {\n            // Ignore errors.\n        }\n        finally {\n            messageChannel.port1.close();\n            URL.revokeObjectURL(url);\n        }\n        return isCallingProcess;\n    };\n};\n//# sourceMappingURL=test-audio-worklet-processor-no-outputs-support.js.map"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,+CAA+C,GAAGA,CAACC,iCAAiC,EAAEC,oCAAoC,KAAK;EACxI,OAAO,YAAY;IACf;IACA,IAAID,iCAAiC,KAAK,IAAI,EAAE;MAC5C,OAAO,IAAI;IACf;IACA,IAAIC,oCAAoC,KAAK,IAAI,EAAE;MAC/C,OAAO,KAAK;IAChB;IACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAClB,uNAAuN,CAC1N,EAAE;MACCC,IAAI,EAAE;IACV,CAAC,CAAC;IACF,MAAMC,cAAc,GAAG,IAAIC,cAAc,CAAC,CAAC;IAC3C;IACA,MAAMC,mBAAmB,GAAG,IAAIN,oCAAoC,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;IACnF,MAAMO,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACR,IAAI,CAAC;IACrC,IAAIS,gBAAgB,GAAG,KAAK;IAC5B,IAAI;MACA,MAAMJ,mBAAmB,CAACK,YAAY,CAACC,SAAS,CAACL,GAAG,CAAC;MACrD,MAAMM,gBAAgB,GAAG,IAAId,iCAAiC,CAACO,mBAAmB,EAAE,GAAG,EAAE;QAAEQ,eAAe,EAAE;MAAE,CAAC,CAAC;MAChH,MAAMC,UAAU,GAAGT,mBAAmB,CAACU,gBAAgB,CAAC,CAAC;MACzD,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC3BL,gBAAgB,CAACM,IAAI,CAACC,SAAS,GAAG,MAAMF,OAAO,CAAC,CAAC;QACjDL,gBAAgB,CAACM,IAAI,CAACE,WAAW,CAACjB,cAAc,CAACkB,KAAK,EAAE,CAAClB,cAAc,CAACkB,KAAK,CAAC,CAAC;MACnF,CAAC,CAAC;MACFT,gBAAgB,CAACM,IAAI,CAACC,SAAS,GAAG,MAAOV,gBAAgB,GAAG,IAAK;MACjEK,UAAU,CAACQ,OAAO,CAACV,gBAAgB,CAAC;MACpCE,UAAU,CAACS,KAAK,CAAC,CAAC,CAAC;MACnB,MAAMlB,mBAAmB,CAACmB,cAAc,CAAC,CAAC;MAC1Cf,gBAAgB,GAAG,MAAM,IAAIO,OAAO,CAAEC,OAAO,IAAK;QAC9Cd,cAAc,CAACsB,KAAK,CAACN,SAAS,GAAG,CAAC;UAAEO;QAAK,CAAC,KAAKT,OAAO,CAACS,IAAI,KAAK,CAAC,CAAC;QAClEvB,cAAc,CAACsB,KAAK,CAACL,WAAW,CAAC,CAAC,CAAC;MACvC,CAAC,CAAC;IACN,CAAC,CACD,MAAM;MACF;IAAA,CACH,SACO;MACJjB,cAAc,CAACsB,KAAK,CAACE,KAAK,CAAC,CAAC;MAC5BpB,GAAG,CAACqB,eAAe,CAACtB,GAAG,CAAC;IAC5B;IACA,OAAOG,gBAAgB;EAC3B,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}