{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Santosh Lade\\\\Desktop\\\\MERN App\\\\client\\\\src\\\\components\\\\ScreenRecording\\\\index.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { Row, Col, Button, Badge } from \"antd\";\n// import { useReactMediaRecorder } from \"react-media-recorder\";\n// import Text from \"antd/lib/typography/Text\";\n// import axios from \"axios\";\n// import \"./style.css\"\n// const ScreenRecording = ({\n//   screen,\n//   audio,\n//   video,\n//   downloadRecordingPath,\n//   downloadRecordingType,\n// }) => {\n//   const [recordingNumber, setRecordingNumber] = useState(0);\n//   const [status, setStatus] = useState(\"\");\n//   const [mediaBlobUrl, setMediaBlobUrl] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n\n//   const {\n//     startRecording,\n//     stopRecording,\n//     mediaBlobUrl: recordedMediaBlobUrl,\n//   } = useReactMediaRecorder({ screen, audio, video });\n\n//   const handleStartRecording = () => {\n//     startRecording();\n//     setStatus(\"recording\");\n//   };\n\n//   const handleStopRecording = async () => {\n//     try {\n//       const currentTimeStamp = new Date().getTime();\n//       setRecordingNumber(currentTimeStamp);\n\n//       await stopRecording();\n//       setStatus(\"stopped\");\n//       setMediaBlobUrl(recordedMediaBlobUrl);\n\n//       const recordingData = {\n//         url: recordedMediaBlobUrl,\n//         timestamp: currentTimeStamp,\n//       };\n//       const url = \"http://localhost:8080/api/recording\"; // Replace with your backend URL\n//       await axios.post(url, recordingData);\n//       console.log(\"Recording saved successfully\");\n//     } catch (error) {\n//       setError(\"An error occurred while stopping recording.\");\n//       console.error(error);\n//     }\n//   };\n\n//   const handleViewRecording = () => {\n//     window.open(mediaBlobUrl, \"_blank\").focus();\n//   };\n\n//   const handleDownloadRecording = () => {\n//     const pathName = `${downloadRecordingPath}_${recordingNumber}.${downloadRecordingType}`;\n//     try {\n//       if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n//         window.navigator.msSaveOrOpenBlob(mediaBlobUrl, pathName);\n//       } else {\n//         const link = document.createElement(\"a\");\n//         link.href = mediaBlobUrl;\n//         link.download = pathName;\n//         document.body.appendChild(link);\n//         link.click();\n//         document.body.removeChild(link);\n//       }\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"Screen-Record-Wrapper\" style={{ padding: \"5px 20px\" }}>\n//       <Row>\n//         <Col span={10} style={{ lineHeight: \"24px\" }}>\n//           {status && status !== \"stopped\" && (\n//             <Text>\n//               Screen Recording Status: {status && status.toUpperCase()}\n//             </Text>\n//           )}\n//           {status && status === \"recording\" && (\n//             <Badge\n//               className=\"screen-recording-badge\"\n//               color=\"#faad14\"\n//               status=\"processing\"\n//               offset={[2, 0]}\n//               style={{\n//                 marginLeft: \"5px\",\n//               }}\n//             />\n//           )}\n//         </Col>\n//         <Col span={10} style={{ textAlign: \"right\" }}>\n//           {status && status !== \"recording\" && (\n//             <Button\n//               size=\"small\"\n//               onClick={handleStartRecording}\n//               type=\"primary\"\n//               icon=\"play-circle\"\n//               className=\"margin-left-sm\"\n//               ghost\n//             >\n//               {mediaBlobUrl ? \"Record again\" : \"Record your Problem\"}\n//             </Button>\n//           )}\n//           {status && status === \"recording\" && (\n//             <Button\n//               size=\"small\"\n//               onClick={handleStopRecording}\n//               type=\"danger\"\n//               icon=\"stop\"\n//               className=\"margin-left-sm\"\n//               ghost\n//             >\n//               Stop Recording\n//             </Button>\n//           )}\n//           {mediaBlobUrl && status && status === \"stopped\" && (\n//             <Button\n//               size=\"small\"\n//               onClick={handleViewRecording}\n//               type=\"primary\"\n//               icon=\"picture\"\n//               className=\"viewRecording margin-left-sm\"\n//             >\n//               View\n//             </Button>\n//           )}\n//           {downloadRecordingType &&\n//             mediaBlobUrl &&\n//             status &&\n//             status === \"stopped\" && (\n//               <Button\n//                 size=\"small\"\n//                 onClick={handleDownloadRecording}\n//                 type=\"primary\"\n//                 icon=\"download\"\n//                 className=\"downloadRecording margin-left-sm\"\n//               >\n//                 Download\n//               </Button>\n//             )}\n//         </Col>\n//       </Row>\n//     </div>\n//   );\n// };\n\n// export default ScreenRecording;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"reactstrap\";\nimport RecordRTC from \"recordrtc\";\nimport axios from \"axios\"; // Import axios for making HTTP requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScreenRecording = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const [recordedMediaBlobUrl, setRecordedMediaBlobUrl] = useState(null);\n  useEffect(() => {\n    RecordRTC.getRecorder();\n  }, []);\n  const handleRecordWindow = async () => {\n    const recorder = RecordRTC.getRecorder();\n    await recorder.startRecording();\n    setRecording(true);\n  };\n  const handleStopRecording = async () => {\n    if (recording) {\n      const recorder = RecordRTC.getRecorder();\n      const blob = await recorder.stopRecording();\n      setRecordedMediaBlobUrl(blob);\n      setRecording(false);\n    }\n  };\n  const saveRecording = async () => {\n    try {\n      if (recordedMediaBlobUrl) {\n        const currentTimeStamp = new Date().getTime();\n        const recordingData = {\n          url: recordedMediaBlobUrl,\n          timestamp: currentTimeStamp\n        };\n        const url = \"http://localhost:8080/api/recording\"; // Replace with your backend URL\n        await axios.post(url, recordingData);\n        console.log(\"Recording saved successfully\");\n      }\n    } catch (error) {\n      console.error(\"An error occurred while saving recording:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Recording Confirmation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Are you sure you want to start recording?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleRecordWindow,\n      children: \"Record Entire Window\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), recording && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleStopRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), !recording && recordedMediaBlobUrl && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: saveRecording,\n      children: \"Save Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s(ScreenRecording, \"8T2a3/Yz8J3knjz6e4o5JBFEcLQ=\");\n_c = ScreenRecording;\nexport default ScreenRecording;\nvar _c;\n$RefreshReg$(_c, \"ScreenRecording\");","map":{"version":3,"names":["React","useState","useEffect","Button","RecordRTC","axios","jsxDEV","_jsxDEV","ScreenRecording","_s","recording","setRecording","recordedMediaBlobUrl","setRecordedMediaBlobUrl","getRecorder","handleRecordWindow","recorder","startRecording","handleStopRecording","blob","stopRecording","saveRecording","currentTimeStamp","Date","getTime","recordingData","url","timestamp","post","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/src/components/ScreenRecording/index.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { Row, Col, Button, Badge } from \"antd\";\r\n// import { useReactMediaRecorder } from \"react-media-recorder\";\r\n// import Text from \"antd/lib/typography/Text\";\r\n// import axios from \"axios\";\r\n// import \"./style.css\"\r\n// const ScreenRecording = ({\r\n//   screen,\r\n//   audio,\r\n//   video,\r\n//   downloadRecordingPath,\r\n//   downloadRecordingType,\r\n// }) => {\r\n//   const [recordingNumber, setRecordingNumber] = useState(0);\r\n//   const [status, setStatus] = useState(\"\");\r\n//   const [mediaBlobUrl, setMediaBlobUrl] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   const {\r\n//     startRecording,\r\n//     stopRecording,\r\n//     mediaBlobUrl: recordedMediaBlobUrl,\r\n//   } = useReactMediaRecorder({ screen, audio, video });\r\n\r\n//   const handleStartRecording = () => {\r\n//     startRecording();\r\n//     setStatus(\"recording\");\r\n//   };\r\n\r\n//   const handleStopRecording = async () => {\r\n//     try {\r\n//       const currentTimeStamp = new Date().getTime();\r\n//       setRecordingNumber(currentTimeStamp);\r\n\r\n//       await stopRecording();\r\n//       setStatus(\"stopped\");\r\n//       setMediaBlobUrl(recordedMediaBlobUrl);\r\n\r\n//       const recordingData = {\r\n//         url: recordedMediaBlobUrl,\r\n//         timestamp: currentTimeStamp,\r\n//       };\r\n//       const url = \"http://localhost:8080/api/recording\"; // Replace with your backend URL\r\n//       await axios.post(url, recordingData);\r\n//       console.log(\"Recording saved successfully\");\r\n//     } catch (error) {\r\n//       setError(\"An error occurred while stopping recording.\");\r\n//       console.error(error);\r\n//     }\r\n//   };\r\n\r\n//   const handleViewRecording = () => {\r\n//     window.open(mediaBlobUrl, \"_blank\").focus();\r\n//   };\r\n\r\n//   const handleDownloadRecording = () => {\r\n//     const pathName = `${downloadRecordingPath}_${recordingNumber}.${downloadRecordingType}`;\r\n//     try {\r\n//       if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n//         window.navigator.msSaveOrOpenBlob(mediaBlobUrl, pathName);\r\n//       } else {\r\n//         const link = document.createElement(\"a\");\r\n//         link.href = mediaBlobUrl;\r\n//         link.download = pathName;\r\n//         document.body.appendChild(link);\r\n//         link.click();\r\n//         document.body.removeChild(link);\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"Screen-Record-Wrapper\" style={{ padding: \"5px 20px\" }}>\r\n//       <Row>\r\n//         <Col span={10} style={{ lineHeight: \"24px\" }}>\r\n//           {status && status !== \"stopped\" && (\r\n//             <Text>\r\n//               Screen Recording Status: {status && status.toUpperCase()}\r\n//             </Text>\r\n//           )}\r\n//           {status && status === \"recording\" && (\r\n//             <Badge\r\n//               className=\"screen-recording-badge\"\r\n//               color=\"#faad14\"\r\n//               status=\"processing\"\r\n//               offset={[2, 0]}\r\n//               style={{\r\n//                 marginLeft: \"5px\",\r\n//               }}\r\n//             />\r\n//           )}\r\n//         </Col>\r\n//         <Col span={10} style={{ textAlign: \"right\" }}>\r\n//           {status && status !== \"recording\" && (\r\n//             <Button\r\n//               size=\"small\"\r\n//               onClick={handleStartRecording}\r\n//               type=\"primary\"\r\n//               icon=\"play-circle\"\r\n//               className=\"margin-left-sm\"\r\n//               ghost\r\n//             >\r\n//               {mediaBlobUrl ? \"Record again\" : \"Record your Problem\"}\r\n//             </Button>\r\n//           )}\r\n//           {status && status === \"recording\" && (\r\n//             <Button\r\n//               size=\"small\"\r\n//               onClick={handleStopRecording}\r\n//               type=\"danger\"\r\n//               icon=\"stop\"\r\n//               className=\"margin-left-sm\"\r\n//               ghost\r\n//             >\r\n//               Stop Recording\r\n//             </Button>\r\n//           )}\r\n//           {mediaBlobUrl && status && status === \"stopped\" && (\r\n//             <Button\r\n//               size=\"small\"\r\n//               onClick={handleViewRecording}\r\n//               type=\"primary\"\r\n//               icon=\"picture\"\r\n//               className=\"viewRecording margin-left-sm\"\r\n//             >\r\n//               View\r\n//             </Button>\r\n//           )}\r\n//           {downloadRecordingType &&\r\n//             mediaBlobUrl &&\r\n//             status &&\r\n//             status === \"stopped\" && (\r\n//               <Button\r\n//                 size=\"small\"\r\n//                 onClick={handleDownloadRecording}\r\n//                 type=\"primary\"\r\n//                 icon=\"download\"\r\n//                 className=\"downloadRecording margin-left-sm\"\r\n//               >\r\n//                 Download\r\n//               </Button>\r\n//             )}\r\n//         </Col>\r\n//       </Row>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ScreenRecording;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport RecordRTC from \"recordrtc\";\r\nimport axios from \"axios\"; // Import axios for making HTTP requests\r\n\r\nconst ScreenRecording = () => {\r\n  const [recording, setRecording] = useState(false);\r\n  const [recordedMediaBlobUrl, setRecordedMediaBlobUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    RecordRTC.getRecorder();\r\n  }, []);\r\n\r\n  const handleRecordWindow = async () => {\r\n    const recorder = RecordRTC.getRecorder();\r\n    await recorder.startRecording();\r\n    setRecording(true);\r\n  };\r\n\r\n  const handleStopRecording = async () => {\r\n    if (recording) {\r\n      const recorder = RecordRTC.getRecorder();\r\n      const blob = await recorder.stopRecording();\r\n      setRecordedMediaBlobUrl(blob);\r\n      setRecording(false);\r\n    }\r\n  };\r\n\r\n  const saveRecording = async () => {\r\n    try {\r\n      if (recordedMediaBlobUrl) {\r\n        const currentTimeStamp = new Date().getTime();\r\n        const recordingData = {\r\n          url: recordedMediaBlobUrl,\r\n          timestamp: currentTimeStamp,\r\n        };\r\n        const url = \"http://localhost:8080/api/recording\"; // Replace with your backend URL\r\n        await axios.post(url, recordingData);\r\n        console.log(\"Recording saved successfully\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"An error occurred while saving recording:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Recording Confirmation</h1>\r\n      <p>Are you sure you want to start recording?</p>\r\n      <Button onClick={handleRecordWindow}>Record Entire Window</Button>\r\n      {recording && (\r\n        <Button onClick={handleStopRecording}>Stop Recording</Button>\r\n      )}\r\n      {!recording && recordedMediaBlobUrl && (\r\n        <Button onClick={saveRecording}>Save Recording</Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScreenRecording;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,YAAY;AACnC,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEtEC,SAAS,CAAC,MAAM;IACdE,SAAS,CAACU,WAAW,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,MAAMC,QAAQ,GAAGZ,SAAS,CAACU,WAAW,CAAC,CAAC;IACxC,MAAME,QAAQ,CAACC,cAAc,CAAC,CAAC;IAC/BN,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMO,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAIR,SAAS,EAAE;MACb,MAAMM,QAAQ,GAAGZ,SAAS,CAACU,WAAW,CAAC,CAAC;MACxC,MAAMK,IAAI,GAAG,MAAMH,QAAQ,CAACI,aAAa,CAAC,CAAC;MAC3CP,uBAAuB,CAACM,IAAI,CAAC;MAC7BR,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,IAAIT,oBAAoB,EAAE;QACxB,MAAMU,gBAAgB,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QAC7C,MAAMC,aAAa,GAAG;UACpBC,GAAG,EAAEd,oBAAoB;UACzBe,SAAS,EAAEL;QACb,CAAC;QACD,MAAMI,GAAG,GAAG,qCAAqC,CAAC,CAAC;QACnD,MAAMrB,KAAK,CAACuB,IAAI,CAACF,GAAG,EAAED,aAAa,CAAC;QACpCI,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACnE;EACF,CAAC;EAED,oBACExB,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MAAAyB,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/B7B,OAAA;MAAAyB,QAAA,EAAG;IAAyC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAChD7B,OAAA,CAACJ,MAAM;MAACkC,OAAO,EAAEtB,kBAAmB;MAAAiB,QAAA,EAAC;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACjE1B,SAAS,iBACRH,OAAA,CAACJ,MAAM;MAACkC,OAAO,EAAEnB,mBAAoB;MAAAc,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAC7D,EACA,CAAC1B,SAAS,IAAIE,oBAAoB,iBACjCL,OAAA,CAACJ,MAAM;MAACkC,OAAO,EAAEhB,aAAc;MAAAW,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACvD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3B,EAAA,CArDID,eAAe;AAAA8B,EAAA,GAAf9B,eAAe;AAuDrB,eAAeA,eAAe;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}