{"ast":null,"code":"import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n  return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(options) {\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n      // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n      if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n        nativeOfflineAudioContext.addEventListener('statechange', (() => {\n          let i = 0;\n          const delayStateChangeEvent = event => {\n            if (this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n                this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n          return delayStateChangeEvent;\n        })());\n      }\n      super(nativeOfflineAudioContext, numberOfChannels);\n      this._length = length;\n      this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      this._state = null;\n    }\n    get length() {\n      // Bug #17: Safari does not yet expose the length.\n      if (this._nativeOfflineAudioContext.length === undefined) {\n        return this._length;\n      }\n      return this._nativeOfflineAudioContext.length;\n    }\n    get state() {\n      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n    }\n    startRendering() {\n      /*\n       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n       * the state of the nativeOfflineAudioContext might no transition to running immediately.\n       */\n      if (this._state === 'running') {\n        return Promise.reject(createInvalidStateError());\n      }\n      this._state = 'running';\n      return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n        this._state = null;\n        deactivateAudioGraph(this);\n      });\n    }\n    _waitForThePromiseToSettle(event) {\n      if (this._state === null) {\n        this._nativeOfflineAudioContext.dispatchEvent(event);\n      } else {\n        setTimeout(() => this._waitForThePromiseToSettle(event));\n      }\n    }\n  };\n};","map":{"version":3,"names":["deactivateAudioGraph","testPromiseSupport","DEFAULT_OPTIONS","numberOfChannels","createMinimalOfflineAudioContextConstructor","cacheTestResult","createInvalidStateError","createNativeOfflineAudioContext","minimalBaseAudioContextConstructor","startRendering","MinimalOfflineAudioContext","constructor","options","length","sampleRate","nativeOfflineAudioContext","addEventListener","i","delayStateChangeEvent","event","_state","removeEventListener","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","undefined","state","Promise","reject","destination","finally","dispatchEvent","setTimeout"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js"],"sourcesContent":["import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(options) {\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n                this._state = null;\n                deactivateAudioGraph(this);\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=minimal-offline-audio-context-constructor.js.map"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,mCAAmC;AACxE,SAASC,kBAAkB,QAAQ,iCAAiC;AACpE,MAAMC,eAAe,GAAG;EACpBC,gBAAgB,EAAE;AACtB,CAAC;AACD,OAAO,MAAMC,2CAA2C,GAAGA,CAACC,eAAe,EAAEC,uBAAuB,EAAEC,+BAA+B,EAAEC,kCAAkC,EAAEC,cAAc,KAAK;EAC1L,OAAO,MAAMC,0BAA0B,SAASF,kCAAkC,CAAC;IAC/EG,WAAWA,CAACC,OAAO,EAAE;MACjB,MAAM;QAAEC,MAAM;QAAEV,gBAAgB;QAAEW;MAAW,CAAC,GAAG;QAAE,GAAGZ,eAAe;QAAE,GAAGU;MAAQ,CAAC;MACnF,MAAMG,yBAAyB,GAAGR,+BAA+B,CAACJ,gBAAgB,EAAEU,MAAM,EAAEC,UAAU,CAAC;MACvG;MACA,IAAI,CAACT,eAAe,CAACJ,kBAAkB,EAAE,MAAMA,kBAAkB,CAACc,yBAAyB,CAAC,CAAC,EAAE;QAC3FA,yBAAyB,CAACC,gBAAgB,CAAC,aAAa,EAAE,CAAC,MAAM;UAC7D,IAAIC,CAAC,GAAG,CAAC;UACT,MAAMC,qBAAqB,GAAIC,KAAK,IAAK;YACrC,IAAI,IAAI,CAACC,MAAM,KAAK,SAAS,EAAE;cAC3B,IAAIH,CAAC,GAAG,CAAC,EAAE;gBACPF,yBAAyB,CAACM,mBAAmB,CAAC,aAAa,EAAEH,qBAAqB,CAAC;gBACnFC,KAAK,CAACG,wBAAwB,CAAC,CAAC;gBAChC,IAAI,CAACC,0BAA0B,CAACJ,KAAK,CAAC;cAC1C,CAAC,MACI;gBACDF,CAAC,IAAI,CAAC;cACV;YACJ;UACJ,CAAC;UACD,OAAOC,qBAAqB;QAChC,CAAC,EAAE,CAAC,CAAC;MACT;MACA,KAAK,CAACH,yBAAyB,EAAEZ,gBAAgB,CAAC;MAClD,IAAI,CAACqB,OAAO,GAAGX,MAAM;MACrB,IAAI,CAACY,0BAA0B,GAAGV,yBAAyB;MAC3D,IAAI,CAACK,MAAM,GAAG,IAAI;IACtB;IACA,IAAIP,MAAMA,CAAA,EAAG;MACT;MACA,IAAI,IAAI,CAACY,0BAA0B,CAACZ,MAAM,KAAKa,SAAS,EAAE;QACtD,OAAO,IAAI,CAACF,OAAO;MACvB;MACA,OAAO,IAAI,CAACC,0BAA0B,CAACZ,MAAM;IACjD;IACA,IAAIc,KAAKA,CAAA,EAAG;MACR,OAAO,IAAI,CAACP,MAAM,KAAK,IAAI,GAAG,IAAI,CAACK,0BAA0B,CAACE,KAAK,GAAG,IAAI,CAACP,MAAM;IACrF;IACAX,cAAcA,CAAA,EAAG;MACb;AACZ;AACA;AACA;MACY,IAAI,IAAI,CAACW,MAAM,KAAK,SAAS,EAAE;QAC3B,OAAOQ,OAAO,CAACC,MAAM,CAACvB,uBAAuB,CAAC,CAAC,CAAC;MACpD;MACA,IAAI,CAACc,MAAM,GAAG,SAAS;MACvB,OAAOX,cAAc,CAAC,IAAI,CAACqB,WAAW,EAAE,IAAI,CAACL,0BAA0B,CAAC,CAACM,OAAO,CAAC,MAAM;QACnF,IAAI,CAACX,MAAM,GAAG,IAAI;QAClBpB,oBAAoB,CAAC,IAAI,CAAC;MAC9B,CAAC,CAAC;IACN;IACAuB,0BAA0BA,CAACJ,KAAK,EAAE;MAC9B,IAAI,IAAI,CAACC,MAAM,KAAK,IAAI,EAAE;QACtB,IAAI,CAACK,0BAA0B,CAACO,aAAa,CAACb,KAAK,CAAC;MACxD,CAAC,MACI;QACDc,UAAU,CAAC,MAAM,IAAI,CAACV,0BAA0B,CAACJ,KAAK,CAAC,CAAC;MAC5D;IACJ;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}