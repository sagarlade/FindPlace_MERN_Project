{"ast":null,"code":"import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  return (anyContext, audioData) => {\n    const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n    // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n    if (detachedArrayBuffers.has(audioData)) {\n      const err = createDataCloneError();\n      return Promise.reject(err);\n    }\n    // The audioData parameter maybe of a type which can't be added to a WeakSet.\n    try {\n      detachedArrayBuffers.add(audioData);\n    } catch {\n      // Ignore errors.\n    }\n    // Bug #21: Safari does not support promises yet.\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n      return nativeContext.decodeAudioData(audioData).then(audioBuffer => {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        detachArrayBuffer(audioData).catch(() => {\n          // Ignore errors.\n        });\n        // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n      });\n    }\n    // Bug #21: Safari does not return a Promise yet.\n    return new Promise((resolve, reject) => {\n      const complete = async () => {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        try {\n          await detachArrayBuffer(audioData);\n        } catch {\n          // Ignore errors.\n        }\n      };\n      const fail = err => {\n        reject(err);\n        complete();\n      };\n      // Bug #26: Safari throws a synchronous error.\n      try {\n        // Bug #1: Safari requires a successCallback.\n        nativeContext.decodeAudioData(audioData, audioBuffer => {\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n          }\n          audioBufferStore.add(audioBuffer);\n          complete().then(() => resolve(audioBuffer));\n        }, err => {\n          // Bug #4: Safari returns null instead of an error.\n          if (err === null) {\n            fail(createEncodingError());\n          } else {\n            fail(err);\n          }\n        });\n      } catch (err) {\n        fail(err);\n      }\n    });\n  };\n};","map":{"version":3,"names":["detachArrayBuffer","wrapAudioBufferGetChannelDataMethod","createDecodeAudioData","audioBufferStore","cacheTestResult","createDataCloneError","createEncodingError","detachedArrayBuffers","getNativeContext","isNativeContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testPromiseSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","anyContext","audioData","nativeContext","has","err","Promise","reject","add","decodeAudioData","then","audioBuffer","catch","resolve","complete","fail","copyFromChannel"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js"],"sourcesContent":["import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n        if (detachedArrayBuffers.has(audioData)) {\n            const err = createDataCloneError();\n            return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            detachedArrayBuffers.add(audioData);\n        }\n        catch {\n            // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            return nativeContext.decodeAudioData(audioData).then((audioBuffer) => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                detachArrayBuffer(audioData).catch(() => {\n                    // Ignore errors.\n                });\n                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n                if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n                audioBufferStore.add(audioBuffer);\n                return audioBuffer;\n            });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = async () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    await detachArrayBuffer(audioData);\n                }\n                catch {\n                    // Ignore errors.\n                }\n            };\n            const fail = (err) => {\n                reject(err);\n                complete();\n            };\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(audioData, (audioBuffer) => {\n                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                    if (typeof audioBuffer.copyFromChannel !== 'function') {\n                        wrapAudioBufferCopyChannelMethods(audioBuffer);\n                        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    }\n                    audioBufferStore.add(audioBuffer);\n                    complete().then(() => resolve(audioBuffer));\n                }, (err) => {\n                    // Bug #4: Safari returns null instead of an error.\n                    if (err === null) {\n                        fail(createEncodingError());\n                    }\n                    else {\n                        fail(err);\n                    }\n                });\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n//# sourceMappingURL=decode-audio-data.js.map"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,mCAAmC,QAAQ,sDAAsD;AAC1G,OAAO,MAAMC,qBAAqB,GAAGA,CAACC,gBAAgB,EAAEC,eAAe,EAAEC,oBAAoB,EAAEC,mBAAmB,EAAEC,oBAAoB,EAAEC,gBAAgB,EAAEC,eAAe,EAAEC,mDAAmD,EAAEC,kBAAkB,EAAEC,iCAAiC,EAAEC,4CAA4C,KAAK;EACtU,OAAO,CAACC,UAAU,EAAEC,SAAS,KAAK;IAC9B,MAAMC,aAAa,GAAGP,eAAe,CAACK,UAAU,CAAC,GAAGA,UAAU,GAAGN,gBAAgB,CAACM,UAAU,CAAC;IAC7F;IACA,IAAIP,oBAAoB,CAACU,GAAG,CAACF,SAAS,CAAC,EAAE;MACrC,MAAMG,GAAG,GAAGb,oBAAoB,CAAC,CAAC;MAClC,OAAOc,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;IAC9B;IACA;IACA,IAAI;MACAX,oBAAoB,CAACc,GAAG,CAACN,SAAS,CAAC;IACvC,CAAC,CACD,MAAM;MACF;IAAA;IAEJ;IACA,IAAIX,eAAe,CAACO,kBAAkB,EAAE,MAAMA,kBAAkB,CAACK,aAAa,CAAC,CAAC,EAAE;MAC9E,OAAOA,aAAa,CAACM,eAAe,CAACP,SAAS,CAAC,CAACQ,IAAI,CAAEC,WAAW,IAAK;QAClE;QACAxB,iBAAiB,CAACe,SAAS,CAAC,CAACU,KAAK,CAAC,MAAM;UACrC;QAAA,CACH,CAAC;QACF;QACA,IAAI,CAACrB,eAAe,CAACM,mDAAmD,EAAE,MAAMA,mDAAmD,CAACc,WAAW,CAAC,CAAC,EAAE;UAC/IX,4CAA4C,CAACW,WAAW,CAAC;QAC7D;QACArB,gBAAgB,CAACkB,GAAG,CAACG,WAAW,CAAC;QACjC,OAAOA,WAAW;MACtB,CAAC,CAAC;IACN;IACA;IACA,OAAO,IAAIL,OAAO,CAAC,CAACO,OAAO,EAAEN,MAAM,KAAK;MACpC,MAAMO,QAAQ,GAAG,MAAAA,CAAA,KAAY;QACzB;QACA,IAAI;UACA,MAAM3B,iBAAiB,CAACe,SAAS,CAAC;QACtC,CAAC,CACD,MAAM;UACF;QAAA;MAER,CAAC;MACD,MAAMa,IAAI,GAAIV,GAAG,IAAK;QAClBE,MAAM,CAACF,GAAG,CAAC;QACXS,QAAQ,CAAC,CAAC;MACd,CAAC;MACD;MACA,IAAI;QACA;QACAX,aAAa,CAACM,eAAe,CAACP,SAAS,EAAGS,WAAW,IAAK;UACtD;UACA;UACA,IAAI,OAAOA,WAAW,CAACK,eAAe,KAAK,UAAU,EAAE;YACnDjB,iCAAiC,CAACY,WAAW,CAAC;YAC9CvB,mCAAmC,CAACuB,WAAW,CAAC;UACpD;UACArB,gBAAgB,CAACkB,GAAG,CAACG,WAAW,CAAC;UACjCG,QAAQ,CAAC,CAAC,CAACJ,IAAI,CAAC,MAAMG,OAAO,CAACF,WAAW,CAAC,CAAC;QAC/C,CAAC,EAAGN,GAAG,IAAK;UACR;UACA,IAAIA,GAAG,KAAK,IAAI,EAAE;YACdU,IAAI,CAACtB,mBAAmB,CAAC,CAAC,CAAC;UAC/B,CAAC,MACI;YACDsB,IAAI,CAACV,GAAG,CAAC;UACb;QACJ,CAAC,CAAC;MACN,CAAC,CACD,OAAOA,GAAG,EAAE;QACRU,IAAI,CAACV,GAAG,CAAC;MACb;IACJ,CAAC,CAAC;EACN,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}