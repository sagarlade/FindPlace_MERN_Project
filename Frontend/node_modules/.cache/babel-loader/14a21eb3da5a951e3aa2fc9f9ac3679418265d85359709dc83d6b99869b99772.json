{"ast":null,"code":"export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n  return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeContext.destination;\n    // Bug #132: Safari does not have the correct channelCount.\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n      try {\n        nativeAudioDestinationNode.channelCount = channelCount;\n      } catch {\n        // Bug #169: Safari throws an error on each attempt to change the channelCount.\n      }\n    }\n    // Bug #83: Safari does not have the correct channelCountMode.\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n      nativeAudioDestinationNode.channelCountMode = 'explicit';\n    }\n    // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n        value: channelCount\n      });\n    }\n    // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n    const gainNode = createNativeGainNode(nativeContext, {\n      channelCount,\n      channelCountMode: nativeAudioDestinationNode.channelCountMode,\n      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n      gain: 1\n    });\n    overwriteAccessors(gainNode, 'channelCount', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      try {\n        nativeAudioDestinationNode.channelCount = value;\n      } catch (err) {\n        // Bug #169: Safari throws an error on each attempt to change the channelCount.\n        if (value > nativeAudioDestinationNode.maxChannelCount) {\n          throw err;\n        }\n      }\n    });\n    overwriteAccessors(gainNode, 'channelCountMode', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelCountMode = value;\n    });\n    overwriteAccessors(gainNode, 'channelInterpretation', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelInterpretation = value;\n    });\n    Object.defineProperty(gainNode, 'maxChannelCount', {\n      get: () => nativeAudioDestinationNode.maxChannelCount\n    });\n    // @todo This should be disconnected when the context is closed.\n    gainNode.connect(nativeAudioDestinationNode);\n    return gainNode;\n  };\n};","map":{"version":3,"names":["createNativeAudioDestinationNodeFactory","createNativeGainNode","overwriteAccessors","nativeContext","channelCount","isNodeOfNativeOfflineAudioContext","nativeAudioDestinationNode","destination","channelCountMode","maxChannelCount","Object","defineProperty","value","gainNode","channelInterpretation","gain","get","call","set","err","connect"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js"],"sourcesContent":["export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeContext.destination;\n        // Bug #132: Safari does not have the correct channelCount.\n        if (nativeAudioDestinationNode.channelCount !== channelCount) {\n            try {\n                nativeAudioDestinationNode.channelCount = channelCount;\n            }\n            catch {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n            }\n        }\n        // Bug #83: Safari does not have the correct channelCountMode.\n        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n            nativeAudioDestinationNode.channelCountMode = 'explicit';\n        }\n        // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n        if (nativeAudioDestinationNode.maxChannelCount === 0) {\n            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n                value: channelCount\n            });\n        }\n        // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n        const gainNode = createNativeGainNode(nativeContext, {\n            channelCount,\n            channelCountMode: nativeAudioDestinationNode.channelCountMode,\n            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n            gain: 1\n        });\n        overwriteAccessors(gainNode, 'channelCount', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            try {\n                nativeAudioDestinationNode.channelCount = value;\n            }\n            catch (err) {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n                if (value > nativeAudioDestinationNode.maxChannelCount) {\n                    throw err;\n                }\n            }\n        });\n        overwriteAccessors(gainNode, 'channelCountMode', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelCountMode = value;\n        });\n        overwriteAccessors(gainNode, 'channelInterpretation', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelInterpretation = value;\n        });\n        Object.defineProperty(gainNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.maxChannelCount\n        });\n        // @todo This should be disconnected when the context is closed.\n        gainNode.connect(nativeAudioDestinationNode);\n        return gainNode;\n    };\n};\n//# sourceMappingURL=native-audio-destination-node.js.map"],"mappings":"AAAA,OAAO,MAAMA,uCAAuC,GAAGA,CAACC,oBAAoB,EAAEC,kBAAkB,KAAK;EACjG,OAAO,CAACC,aAAa,EAAEC,YAAY,EAAEC,iCAAiC,KAAK;IACvE,MAAMC,0BAA0B,GAAGH,aAAa,CAACI,WAAW;IAC5D;IACA,IAAID,0BAA0B,CAACF,YAAY,KAAKA,YAAY,EAAE;MAC1D,IAAI;QACAE,0BAA0B,CAACF,YAAY,GAAGA,YAAY;MAC1D,CAAC,CACD,MAAM;QACF;MAAA;IAER;IACA;IACA,IAAIC,iCAAiC,IAAIC,0BAA0B,CAACE,gBAAgB,KAAK,UAAU,EAAE;MACjGF,0BAA0B,CAACE,gBAAgB,GAAG,UAAU;IAC5D;IACA;IACA,IAAIF,0BAA0B,CAACG,eAAe,KAAK,CAAC,EAAE;MAClDC,MAAM,CAACC,cAAc,CAACL,0BAA0B,EAAE,iBAAiB,EAAE;QACjEM,KAAK,EAAER;MACX,CAAC,CAAC;IACN;IACA;IACA,MAAMS,QAAQ,GAAGZ,oBAAoB,CAACE,aAAa,EAAE;MACjDC,YAAY;MACZI,gBAAgB,EAAEF,0BAA0B,CAACE,gBAAgB;MAC7DM,qBAAqB,EAAER,0BAA0B,CAACQ,qBAAqB;MACvEC,IAAI,EAAE;IACV,CAAC,CAAC;IACFb,kBAAkB,CAACW,QAAQ,EAAE,cAAc,EAAGG,GAAG,IAAK,MAAMA,GAAG,CAACC,IAAI,CAACJ,QAAQ,CAAC,EAAGK,GAAG,IAAMN,KAAK,IAAK;MAChGM,GAAG,CAACD,IAAI,CAACJ,QAAQ,EAAED,KAAK,CAAC;MACzB,IAAI;QACAN,0BAA0B,CAACF,YAAY,GAAGQ,KAAK;MACnD,CAAC,CACD,OAAOO,GAAG,EAAE;QACR;QACA,IAAIP,KAAK,GAAGN,0BAA0B,CAACG,eAAe,EAAE;UACpD,MAAMU,GAAG;QACb;MACJ;IACJ,CAAC,CAAC;IACFjB,kBAAkB,CAACW,QAAQ,EAAE,kBAAkB,EAAGG,GAAG,IAAK,MAAMA,GAAG,CAACC,IAAI,CAACJ,QAAQ,CAAC,EAAGK,GAAG,IAAMN,KAAK,IAAK;MACpGM,GAAG,CAACD,IAAI,CAACJ,QAAQ,EAAED,KAAK,CAAC;MACzBN,0BAA0B,CAACE,gBAAgB,GAAGI,KAAK;IACvD,CAAC,CAAC;IACFV,kBAAkB,CAACW,QAAQ,EAAE,uBAAuB,EAAGG,GAAG,IAAK,MAAMA,GAAG,CAACC,IAAI,CAACJ,QAAQ,CAAC,EAAGK,GAAG,IAAMN,KAAK,IAAK;MACzGM,GAAG,CAACD,IAAI,CAACJ,QAAQ,EAAED,KAAK,CAAC;MACzBN,0BAA0B,CAACQ,qBAAqB,GAAGF,KAAK;IAC5D,CAAC,CAAC;IACFF,MAAM,CAACC,cAAc,CAACE,QAAQ,EAAE,iBAAiB,EAAE;MAC/CG,GAAG,EAAEA,CAAA,KAAMV,0BAA0B,CAACG;IAC1C,CAAC,CAAC;IACF;IACAI,QAAQ,CAACO,OAAO,CAACd,0BAA0B,CAAC;IAC5C,OAAOO,QAAQ;EACnB,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}