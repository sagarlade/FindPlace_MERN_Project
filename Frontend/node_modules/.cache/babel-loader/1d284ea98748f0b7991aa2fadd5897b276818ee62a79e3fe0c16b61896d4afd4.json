{"ast":null,"code":"export const createReadElementContent = readVariableSizeInteger => {\n  return (dataView, offset, type, channelCount = 2) => {\n    const lengthAndValue = readVariableSizeInteger(dataView, offset);\n    if (lengthAndValue === null) {\n      return lengthAndValue;\n    }\n    const {\n      length,\n      value\n    } = lengthAndValue;\n    if (type === 'master') {\n      return {\n        content: null,\n        length\n      };\n    }\n    if (offset + length + value > dataView.byteLength) {\n      return null;\n    }\n    if (type === 'binary') {\n      const numberOfSamples = (value / Float32Array.BYTES_PER_ELEMENT - 1) / channelCount;\n      const content = Array.from({\n        length: channelCount\n      }, () => new Float32Array(numberOfSamples));\n      for (let i = 0; i < numberOfSamples; i += 1) {\n        const elementOffset = i * channelCount + 1;\n        for (let j = 0; j < channelCount; j += 1) {\n          content[j][i] = dataView.getFloat32(offset + length + (elementOffset + j) * Float32Array.BYTES_PER_ELEMENT, true);\n        }\n      }\n      return {\n        content,\n        length: length + value\n      };\n    }\n    return {\n      content: null,\n      length: length + value\n    };\n  };\n};","map":{"version":3,"names":["createReadElementContent","readVariableSizeInteger","dataView","offset","type","channelCount","lengthAndValue","length","value","content","byteLength","numberOfSamples","Float32Array","BYTES_PER_ELEMENT","Array","from","i","elementOffset","j","getFloat32"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/extendable-media-recorder/build/es2019/factories/read-element-content.js"],"sourcesContent":["export const createReadElementContent = (readVariableSizeInteger) => {\n    return (dataView, offset, type, channelCount = 2) => {\n        const lengthAndValue = readVariableSizeInteger(dataView, offset);\n        if (lengthAndValue === null) {\n            return lengthAndValue;\n        }\n        const { length, value } = lengthAndValue;\n        if (type === 'master') {\n            return { content: null, length };\n        }\n        if (offset + length + value > dataView.byteLength) {\n            return null;\n        }\n        if (type === 'binary') {\n            const numberOfSamples = (value / Float32Array.BYTES_PER_ELEMENT - 1) / channelCount;\n            const content = Array.from({ length: channelCount }, () => new Float32Array(numberOfSamples));\n            for (let i = 0; i < numberOfSamples; i += 1) {\n                const elementOffset = i * channelCount + 1;\n                for (let j = 0; j < channelCount; j += 1) {\n                    content[j][i] = dataView.getFloat32(offset + length + (elementOffset + j) * Float32Array.BYTES_PER_ELEMENT, true);\n                }\n            }\n            return { content, length: length + value };\n        }\n        return { content: null, length: length + value };\n    };\n};\n//# sourceMappingURL=read-element-content.js.map"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAIC,uBAAuB,IAAK;EACjE,OAAO,CAACC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAEC,YAAY,GAAG,CAAC,KAAK;IACjD,MAAMC,cAAc,GAAGL,uBAAuB,CAACC,QAAQ,EAAEC,MAAM,CAAC;IAChE,IAAIG,cAAc,KAAK,IAAI,EAAE;MACzB,OAAOA,cAAc;IACzB;IACA,MAAM;MAAEC,MAAM;MAAEC;IAAM,CAAC,GAAGF,cAAc;IACxC,IAAIF,IAAI,KAAK,QAAQ,EAAE;MACnB,OAAO;QAAEK,OAAO,EAAE,IAAI;QAAEF;MAAO,CAAC;IACpC;IACA,IAAIJ,MAAM,GAAGI,MAAM,GAAGC,KAAK,GAAGN,QAAQ,CAACQ,UAAU,EAAE;MAC/C,OAAO,IAAI;IACf;IACA,IAAIN,IAAI,KAAK,QAAQ,EAAE;MACnB,MAAMO,eAAe,GAAG,CAACH,KAAK,GAAGI,YAAY,CAACC,iBAAiB,GAAG,CAAC,IAAIR,YAAY;MACnF,MAAMI,OAAO,GAAGK,KAAK,CAACC,IAAI,CAAC;QAAER,MAAM,EAAEF;MAAa,CAAC,EAAE,MAAM,IAAIO,YAAY,CAACD,eAAe,CAAC,CAAC;MAC7F,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,eAAe,EAAEK,CAAC,IAAI,CAAC,EAAE;QACzC,MAAMC,aAAa,GAAGD,CAAC,GAAGX,YAAY,GAAG,CAAC;QAC1C,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,YAAY,EAAEa,CAAC,IAAI,CAAC,EAAE;UACtCT,OAAO,CAACS,CAAC,CAAC,CAACF,CAAC,CAAC,GAAGd,QAAQ,CAACiB,UAAU,CAAChB,MAAM,GAAGI,MAAM,GAAG,CAACU,aAAa,GAAGC,CAAC,IAAIN,YAAY,CAACC,iBAAiB,EAAE,IAAI,CAAC;QACrH;MACJ;MACA,OAAO;QAAEJ,OAAO;QAAEF,MAAM,EAAEA,MAAM,GAAGC;MAAM,CAAC;IAC9C;IACA,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEF,MAAM,EAAEA,MAAM,GAAGC;IAAM,CAAC;EACpD,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}