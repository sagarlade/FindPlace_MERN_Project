{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 6,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'discrete',\n  numberOfOutputs: 6\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions) => {\n  return class ChannelSplitterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = sanitizeChannelSplitterOptions({\n        ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n      const channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n      super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n    }\n  };\n};","map":{"version":3,"names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","numberOfOutputs","createChannelSplitterNodeConstructor","audioNodeConstructor","createChannelSplitterNodeRenderer","createNativeChannelSplitterNode","getNativeContext","isNativeOfflineAudioContext","sanitizeChannelSplitterOptions","ChannelSplitterNode","constructor","context","options","nativeContext","mergedOptions","nativeChannelSplitterNode","channelSplitterNodeRenderer"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js"],"sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions) => {\n    return class ChannelSplitterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizeChannelSplitterOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null));\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=channel-splitter-node-constructor.js.map"],"mappings":"AAAA,MAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,UAAU;EAC5BC,qBAAqB,EAAE,UAAU;EACjCC,eAAe,EAAE;AACrB,CAAC;AACD,OAAO,MAAMC,oCAAoC,GAAGA,CAACC,oBAAoB,EAAEC,iCAAiC,EAAEC,+BAA+B,EAAEC,gBAAgB,EAAEC,2BAA2B,EAAEC,8BAA8B,KAAK;EAC7N,OAAO,MAAMC,mBAAmB,SAASN,oBAAoB,CAAC;IAC1DO,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAE;MAC1B,MAAMC,aAAa,GAAGP,gBAAgB,CAACK,OAAO,CAAC;MAC/C,MAAMG,aAAa,GAAGN,8BAA8B,CAAC;QAAE,GAAGX,eAAe;QAAE,GAAGe;MAAQ,CAAC,CAAC;MACxF,MAAMG,yBAAyB,GAAGV,+BAA+B,CAACQ,aAAa,EAAEC,aAAa,CAAC;MAC/F,MAAME,2BAA2B,GAAKT,2BAA2B,CAACM,aAAa,CAAC,GAAGT,iCAAiC,CAAC,CAAC,GAAG,IAAM;MAC/H,KAAK,CAACO,OAAO,EAAE,KAAK,EAAEI,yBAAyB,EAAEC,2BAA2B,CAAC;IACjF;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}