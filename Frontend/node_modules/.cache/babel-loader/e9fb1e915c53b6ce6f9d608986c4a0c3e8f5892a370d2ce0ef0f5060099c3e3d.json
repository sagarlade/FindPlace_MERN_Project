{"ast":null,"code":"import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n  if (!isAudioWorkletNode(audioNode) && activeInputs.every(connections => connections.size === 0)) {\n    setInternalStateToPassive(audioNode);\n  }\n};","map":{"version":3,"names":["isAudioWorkletNode","setInternalStateToPassive","setInternalStateToPassiveWhenNecessary","audioNode","activeInputs","every","connections","size"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js"],"sourcesContent":["import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n    if (!isAudioWorkletNode(audioNode) && activeInputs.every((connections) => connections.size === 0)) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n//# sourceMappingURL=set-internal-state-to-passive-when-necessary.js.map"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,yBAAyB,QAAQ,iCAAiC;AAC3E;AACA,OAAO,MAAMC,sCAAsC,GAAGA,CAACC,SAAS,EAAEC,YAAY,KAAK;EAC/E,IAAI,CAACJ,kBAAkB,CAACG,SAAS,CAAC,IAAIC,YAAY,CAACC,KAAK,CAAEC,WAAW,IAAKA,WAAW,CAACC,IAAI,KAAK,CAAC,CAAC,EAAE;IAC/FN,yBAAyB,CAACE,SAAS,CAAC;EACxC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}