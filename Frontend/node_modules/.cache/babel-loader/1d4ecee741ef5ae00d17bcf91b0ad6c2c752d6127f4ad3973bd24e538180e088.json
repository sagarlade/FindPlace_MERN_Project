{"ast":null,"code":"import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNotSupportedError, overwriteAccessors) => {\n  return (nativeContext, options) => {\n    const nativeConvolverNode = nativeContext.createConvolver();\n    assignNativeAudioNodeOptions(nativeConvolverNode, options);\n    // The normalize property needs to be set before setting the buffer.\n    if (options.disableNormalization === nativeConvolverNode.normalize) {\n      nativeConvolverNode.normalize = !options.disableNormalization;\n    }\n    assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n    // Bug #113: Safari does allow to set the channelCount to a value larger than 2.\n    if (options.channelCount > 2) {\n      throw createNotSupportedError();\n    }\n    overwriteAccessors(nativeConvolverNode, 'channelCount', get => () => get.call(nativeConvolverNode), set => value => {\n      if (value > 2) {\n        throw createNotSupportedError();\n      }\n      return set.call(nativeConvolverNode, value);\n    });\n    // Bug #114: Safari allows to set the channelCountMode to 'max'.\n    if (options.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n    overwriteAccessors(nativeConvolverNode, 'channelCountMode', get => () => get.call(nativeConvolverNode), set => value => {\n      if (value === 'max') {\n        throw createNotSupportedError();\n      }\n      return set.call(nativeConvolverNode, value);\n    });\n    return nativeConvolverNode;\n  };\n};","map":{"version":3,"names":["assignNativeAudioNodeOption","assignNativeAudioNodeOptions","createNativeConvolverNodeFactory","createNotSupportedError","overwriteAccessors","nativeContext","options","nativeConvolverNode","createConvolver","disableNormalization","normalize","channelCount","get","call","set","value","channelCountMode"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js"],"sourcesContent":["import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNotSupportedError, overwriteAccessors) => {\n    return (nativeContext, options) => {\n        const nativeConvolverNode = nativeContext.createConvolver();\n        assignNativeAudioNodeOptions(nativeConvolverNode, options);\n        // The normalize property needs to be set before setting the buffer.\n        if (options.disableNormalization === nativeConvolverNode.normalize) {\n            nativeConvolverNode.normalize = !options.disableNormalization;\n        }\n        assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n        // Bug #113: Safari does allow to set the channelCount to a value larger than 2.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        overwriteAccessors(nativeConvolverNode, 'channelCount', (get) => () => get.call(nativeConvolverNode), (set) => (value) => {\n            if (value > 2) {\n                throw createNotSupportedError();\n            }\n            return set.call(nativeConvolverNode, value);\n        });\n        // Bug #114: Safari allows to set the channelCountMode to 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        overwriteAccessors(nativeConvolverNode, 'channelCountMode', (get) => () => get.call(nativeConvolverNode), (set) => (value) => {\n            if (value === 'max') {\n                throw createNotSupportedError();\n            }\n            return set.call(nativeConvolverNode, value);\n        });\n        return nativeConvolverNode;\n    };\n};\n//# sourceMappingURL=native-convolver-node-factory.js.map"],"mappings":"AAAA,SAASA,2BAA2B,QAAQ,4CAA4C;AACxF,SAASC,4BAA4B,QAAQ,6CAA6C;AAC1F,OAAO,MAAMC,gCAAgC,GAAGA,CAACC,uBAAuB,EAAEC,kBAAkB,KAAK;EAC7F,OAAO,CAACC,aAAa,EAAEC,OAAO,KAAK;IAC/B,MAAMC,mBAAmB,GAAGF,aAAa,CAACG,eAAe,CAAC,CAAC;IAC3DP,4BAA4B,CAACM,mBAAmB,EAAED,OAAO,CAAC;IAC1D;IACA,IAAIA,OAAO,CAACG,oBAAoB,KAAKF,mBAAmB,CAACG,SAAS,EAAE;MAChEH,mBAAmB,CAACG,SAAS,GAAG,CAACJ,OAAO,CAACG,oBAAoB;IACjE;IACAT,2BAA2B,CAACO,mBAAmB,EAAED,OAAO,EAAE,QAAQ,CAAC;IACnE;IACA,IAAIA,OAAO,CAACK,YAAY,GAAG,CAAC,EAAE;MAC1B,MAAMR,uBAAuB,CAAC,CAAC;IACnC;IACAC,kBAAkB,CAACG,mBAAmB,EAAE,cAAc,EAAGK,GAAG,IAAK,MAAMA,GAAG,CAACC,IAAI,CAACN,mBAAmB,CAAC,EAAGO,GAAG,IAAMC,KAAK,IAAK;MACtH,IAAIA,KAAK,GAAG,CAAC,EAAE;QACX,MAAMZ,uBAAuB,CAAC,CAAC;MACnC;MACA,OAAOW,GAAG,CAACD,IAAI,CAACN,mBAAmB,EAAEQ,KAAK,CAAC;IAC/C,CAAC,CAAC;IACF;IACA,IAAIT,OAAO,CAACU,gBAAgB,KAAK,KAAK,EAAE;MACpC,MAAMb,uBAAuB,CAAC,CAAC;IACnC;IACAC,kBAAkB,CAACG,mBAAmB,EAAE,kBAAkB,EAAGK,GAAG,IAAK,MAAMA,GAAG,CAACC,IAAI,CAACN,mBAAmB,CAAC,EAAGO,GAAG,IAAMC,KAAK,IAAK;MAC1H,IAAIA,KAAK,KAAK,KAAK,EAAE;QACjB,MAAMZ,uBAAuB,CAAC,CAAC;MACnC;MACA,OAAOW,GAAG,CAACD,IAAI,CAACN,mBAAmB,EAAEQ,KAAK,CAAC;IAC/C,CAAC,CAAC;IACF,OAAOR,mBAAmB;EAC9B,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}