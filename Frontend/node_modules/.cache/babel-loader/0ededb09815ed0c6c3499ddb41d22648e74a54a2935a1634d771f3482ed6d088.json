{"ast":null,"code":"import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet(), sanitizePeriodicWaveOptions);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),\n// @todo window is guaranteed to be defined because isSecureContext checks that as well.\nwindow) : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor), testDomExceptionConstructorSupport, createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);","map":{"version":3,"names":["createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","createSetValueAutomationEvent","createSetValueCurveAutomationEvent","createAbortError","createAddActiveInputConnectionToAudioNode","createAddAudioNodeConnections","createAddAudioParamConnections","createAddAudioWorkletModule","createAddConnectionToAudioNode","createAddPassiveInputConnectionToAudioNode","createAddSilentConnection","createAddUnrenderedAudioWorkletNode","createAnalyserNodeConstructor","createAnalyserNodeRendererFactory","createAudioBufferConstructor","createAudioBufferSourceNodeConstructor","createAudioBufferSourceNodeRendererFactory","createAudioContextConstructor","createAudioDestinationNodeConstructor","createAudioDestinationNodeRenderer","createAudioListenerFactory","createAudioNodeConstructor","createAudioParamFactory","createAudioParamRenderer","createAudioWorkletNodeConstructor","createAudioWorkletNodeRendererFactory","createBaseAudioContextConstructor","createBiquadFilterNodeConstructor","createBiquadFilterNodeRendererFactory","createCacheTestResult","createChannelMergerNodeConstructor","createChannelMergerNodeRendererFactory","createChannelSplitterNodeConstructor","createChannelSplitterNodeRendererFactory","createConnectAudioParam","createConnectMultipleOutputs","createConnectedNativeAudioBufferSourceNodeFactory","createConstantSourceNodeConstructor","createConstantSourceNodeRendererFactory","createConvertNumberToUnsignedLong","createConvolverNodeConstructor","createConvolverNodeRendererFactory","createCreateNativeOfflineAudioContext","createDataCloneError","createDecodeAudioData","createDecrementCycleCounter","createDelayNodeConstructor","createDelayNodeRendererFactory","createDeleteActiveInputConnectionToAudioNode","createDeleteUnrenderedAudioWorkletNode","createDetectCycles","createDisconnectMultipleOutputs","createDynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRendererFactory","createEncodingError","createEvaluateSource","createEventTargetConstructor","createExposeCurrentFrameAndCurrentTime","createFetchSource","createGainNodeConstructor","createGainNodeRendererFactory","createGetActiveAudioWorkletNodeInputs","createGetAudioNodeRenderer","createGetAudioNodeTailTime","createGetAudioParamRenderer","createGetBackupOfflineAudioContext","createGetNativeContext","createGetOrCreateBackupOfflineAudioContext","createGetUnrenderedAudioWorkletNodes","createIIRFilterNodeConstructor","createIIRFilterNodeRendererFactory","createIncrementCycleCounterFactory","createIndexSizeError","createInvalidAccessError","createInvalidStateError","createIsAnyAudioContext","createIsAnyAudioNode","createIsAnyAudioParam","createIsAnyOfflineAudioContext","createIsNativeAudioContext","createIsNativeAudioNode","createIsNativeAudioParam","createIsNativeContext","createIsNativeOfflineAudioContext","createIsSecureContext","createIsSupportedPromise","createMediaElementAudioSourceNodeConstructor","createMediaStreamAudioDestinationNodeConstructor","createMediaStreamAudioSourceNodeConstructor","createMediaStreamTrackAudioSourceNodeConstructor","createMinimalAudioContextConstructor","createMinimalBaseAudioContextConstructor","createMinimalOfflineAudioContextConstructor","createMonitorConnections","createNativeAnalyserNodeFactory","createNativeAudioBufferConstructor","createNativeAudioBufferSourceNodeFactory","createNativeAudioContextConstructor","createNativeAudioDestinationNodeFactory","createNativeAudioWorkletNodeConstructor","createNativeAudioWorkletNodeFactory","createNativeAudioWorkletNodeFakerFactory","createNativeBiquadFilterNode","createNativeChannelMergerNodeFactory","createNativeChannelSplitterNode","createNativeConstantSourceNodeFactory","createNativeConstantSourceNodeFakerFactory","createNativeConvolverNodeFactory","createNativeDelayNode","createNativeDynamicsCompressorNodeFactory","createNativeGainNode","createNativeIIRFilterNodeFactory","createNativeIIRFilterNodeFakerFactory","createNativeMediaElementAudioSourceNode","createNativeMediaStreamAudioDestinationNode","createNativeMediaStreamAudioSourceNode","createNativeMediaStreamTrackAudioSourceNodeFactory","createNativeOfflineAudioContextConstructor","createNativeOscillatorNodeFactory","createNativePannerNodeFactory","createNativePannerNodeFakerFactory","createNativePeriodicWaveFactory","createNativeScriptProcessorNode","createNativeStereoPannerNodeFactory","createNativeStereoPannerNodeFakerFactory","createNativeWaveShaperNodeFactory","createNativeWaveShaperNodeFakerFactory","createNotSupportedError","createOfflineAudioContextConstructor","createOscillatorNodeConstructor","createOscillatorNodeRendererFactory","createPannerNodeConstructor","createPannerNodeRendererFactory","createPeriodicWaveConstructor","createRenderAutomation","createRenderInputsOfAudioNode","createRenderInputsOfAudioParam","createRenderNativeOfflineAudioContext","createSetActiveAudioWorkletNodeInputs","createSetAudioNodeTailTime","createStartRendering","createStereoPannerNodeConstructor","createStereoPannerNodeRendererFactory","createTestAudioBufferConstructorSupport","createTestAudioBufferCopyChannelMethodsSubarraySupport","createTestAudioContextCloseMethodSupport","createTestAudioContextDecodeAudioDataMethodTypeErrorSupport","createTestAudioContextOptionsSupport","createTestAudioNodeConnectMethodSupport","createTestAudioWorkletProcessorNoOutputsSupport","createTestAudioWorkletProcessorPostMessageSupport","createTestChannelMergerNodeChannelCountSupport","createTestConstantSourceNodeAccurateSchedulingSupport","createTestConvolverNodeBufferReassignabilitySupport","createTestConvolverNodeChannelCountSupport","createTestIsSecureContextSupport","createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport","createTestOfflineAudioContextCurrentTimeSupport","createTestStereoPannerNodeDefaultValueSupport","createUnknownError","createWaveShaperNodeConstructor","createWaveShaperNodeRendererFactory","createWindow","createWrapAudioBufferCopyChannelMethods","createWrapAudioBufferCopyChannelMethodsOutOfBounds","createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer","createWrapChannelMergerNode","AUDIO_NODE_CONNECTIONS_STORE","AUDIO_NODE_STORE","AUDIO_PARAM_CONNECTIONS_STORE","AUDIO_PARAM_STORE","CONTEXT_STORE","CYCLE_COUNTERS","connectNativeAudioNodeToNativeAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getAudioParamConnections","getEventListenersOfAudioNode","getFirstSample","getNativeAudioNode","getNativeAudioParam","getValueForKey","insertElementInSet","isActiveAudioNode","isDCCurve","isPartOfACycle","isPassiveAudioNode","overwriteAccessors","pickElementFromSet","sanitizeAudioWorkletNodeOptions","sanitizeChannelSplitterOptions","sanitizePeriodicWaveOptions","setValueAtTimeUntilPossible","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","testAudioWorkletNodeOptionsClonability","testDomExceptionConstructorSupport","testPromiseSupport","testTransferablesSupport","wrapAudioBufferSourceNodeStartMethodOffsetClamping","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","wrapEventListener","addActiveInputConnectionToAudioNode","addPassiveInputConnectionToAudioNode","deleteActiveInputConnectionToAudioNode","audioNodeTailTimeStore","WeakMap","getAudioNodeTailTime","cacheTestResult","Map","window","createNativeAnalyserNode","getAudioNodeRenderer","renderInputsOfAudioNode","createAnalyserNodeRenderer","getNativeContext","nativeOfflineAudioContextConstructor","isNativeOfflineAudioContext","audioParamAudioNodeStore","eventTargetConstructor","nativeAudioContextConstructor","isNativeAudioContext","isNativeAudioNode","isNativeAudioParam","nativeAudioWorkletNodeConstructor","audioNodeConstructor","analyserNodeConstructor","AnalyserNode","audioBufferStore","WeakSet","nativeAudioBufferConstructor","convertNumberToUnsignedLong","Uint32Array","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","audioBufferConstructor","AudioBuffer","addSilentConnection","renderInputsOfAudioParam","connectAudioParam","createNativeAudioBufferSourceNode","renderAutomation","createAudioBufferSourceNodeRenderer","createAudioParam","audioBufferSourceNodeConstructor","AudioBufferSourceNode","audioDestinationNodeConstructor","createBiquadFilterNodeRenderer","setAudioNodeTailTime","biquadFilterNodeConstructor","monitorConnections","wrapChannelMergerNode","createNativeChannelMergerNode","createChannelMergerNodeRenderer","channelMergerNodeConstructor","createChannelSplitterNodeRenderer","channelSplitterNodeConstructor","createNativeConstantSourceNodeFaker","createNativeConstantSourceNode","createConstantSourceNodeRenderer","constantSourceNodeConstructor","createNativeConvolverNode","createConvolverNodeRenderer","convolverNodeConstructor","createDelayNodeRenderer","delayNodeConstructor","createNativeDynamicsCompressorNode","createDynamicsCompressorNodeRenderer","dynamicsCompressorNodeConstructor","createGainNodeRenderer","gainNodeConstructor","createNativeIIRFilterNodeFaker","renderNativeOfflineAudioContext","createIIRFilterNodeRenderer","createNativeIIRFilterNode","iIRFilterNodeConstructor","createAudioListener","unrenderedAudioWorkletNodeStore","minimalBaseAudioContextConstructor","createNativeOscillatorNode","createOscillatorNodeRenderer","oscillatorNodeConstructor","createConnectedNativeAudioBufferSourceNode","createNativeWaveShaperNodeFaker","createNativeWaveShaperNode","createNativePannerNodeFaker","createNativePannerNode","createPannerNodeRenderer","pannerNodeConstructor","createNativePeriodicWave","periodicWaveConstructor","nativeStereoPannerNodeFakerFactory","createNativeStereoPannerNode","createStereoPannerNodeRenderer","stereoPannerNodeConstructor","createWaveShaperNodeRenderer","waveShaperNodeConstructor","isSecureContext","exposeCurrentFrameAndCurrentTime","backupOfflineAudioContextStore","getOrCreateBackupOfflineAudioContext","addAudioWorkletModule","undefined","isNativeContext","decodeAudioData","baseAudioContextConstructor","mediaElementAudioSourceNodeConstructor","mediaStreamAudioDestinationNodeConstructor","mediaStreamAudioSourceNodeConstructor","createNativeMediaStreamTrackAudioSourceNode","mediaStreamTrackAudioSourceNodeConstructor","audioContextConstructor","AudioContext","getUnrenderedAudioWorkletNodes","addUnrenderedAudioWorkletNode","connectMultipleOutputs","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","activeAudioWorkletNodeInputsStore","getActiveAudioWorkletNodeInputs","createNativeAudioWorkletNodeFaker","createNativeAudioWorkletNode","createAudioWorkletNodeRenderer","getBackupOfflineAudioContext","setActiveAudioWorkletNodeInputs","audioWorkletNodeConstructor","AudioWorkletNode","BiquadFilterNode","ChannelMergerNode","ChannelSplitterNode","ConvolverNode","ConstantSourceNode","DelayNode","DynamicsCompressorNode","GainNode","IIRFilterNode","MediaElementAudioSourceNode","MediaStreamAudioDestinationNode","MediaStreamAudioSourceNode","MediaStreamTrackAudioSourceNode","minimalAudioContextConstructor","MinimalAudioContext","createNativeOfflineAudioContext","startRendering","minimalOfflineAudioContextConstructor","MinimalOfflineAudioContext","offlineAudioContextConstructor","OfflineAudioContext","OscillatorNode","PannerNode","PeriodicWave","StereoPannerNode","WaveShaperNode","isAnyAudioContext","isAnyAudioNode","isAnyAudioParam","isAnyOfflineAudioContext","isSupported"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/module.js"],"sourcesContent":["import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet(), sanitizePeriodicWaveOptions);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = isSecureContext\n    ? createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), \n    // @todo window is guaranteed to be defined because isSecureContext checks that as well.\n    window)\n    : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = isSecureContext\n    ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener)\n    : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor), testDomExceptionConstructorSupport, createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=module.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}