{"ast":null,"code":"import { interceptConnections } from './intercept-connections';\nexport const wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (nativeAudioScheduledSourceNode, nativeContext) => {\n  const nativeGainNode = nativeContext.createGain();\n  nativeAudioScheduledSourceNode.connect(nativeGainNode);\n  const disconnectGainNode = (disconnect => {\n    return () => {\n      // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n      disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n      nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n    };\n  })(nativeAudioScheduledSourceNode.disconnect);\n  nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n  interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n  nativeAudioScheduledSourceNode.stop = (stop => {\n    let isStopped = false;\n    return (when = 0) => {\n      if (isStopped) {\n        try {\n          stop.call(nativeAudioScheduledSourceNode, when);\n        } catch {\n          nativeGainNode.gain.setValueAtTime(0, when);\n        }\n      } else {\n        stop.call(nativeAudioScheduledSourceNode, when);\n        isStopped = true;\n      }\n    };\n  })(nativeAudioScheduledSourceNode.stop);\n};","map":{"version":3,"names":["interceptConnections","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","nativeAudioScheduledSourceNode","nativeContext","nativeGainNode","createGain","connect","disconnectGainNode","disconnect","call","removeEventListener","addEventListener","stop","isStopped","when","gain","setValueAtTime"],"sources":["C:/Users/Santosh Lade/Desktop/MERN App/client/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js"],"sourcesContent":["import { interceptConnections } from './intercept-connections';\nexport const wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (nativeAudioScheduledSourceNode, nativeContext) => {\n    const nativeGainNode = nativeContext.createGain();\n    nativeAudioScheduledSourceNode.connect(nativeGainNode);\n    const disconnectGainNode = ((disconnect) => {\n        return () => {\n            // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n            disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n            nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n        };\n    })(nativeAudioScheduledSourceNode.disconnect);\n    nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n    interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        let isStopped = false;\n        return (when = 0) => {\n            if (isStopped) {\n                try {\n                    stop.call(nativeAudioScheduledSourceNode, when);\n                }\n                catch {\n                    nativeGainNode.gain.setValueAtTime(0, when);\n                }\n            }\n            else {\n                stop.call(nativeAudioScheduledSourceNode, when);\n                isStopped = true;\n            }\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js.map"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,yBAAyB;AAC9D,OAAO,MAAMC,sDAAsD,GAAGA,CAACC,8BAA8B,EAAEC,aAAa,KAAK;EACrH,MAAMC,cAAc,GAAGD,aAAa,CAACE,UAAU,CAAC,CAAC;EACjDH,8BAA8B,CAACI,OAAO,CAACF,cAAc,CAAC;EACtD,MAAMG,kBAAkB,GAAG,CAAEC,UAAU,IAAK;IACxC,OAAO,MAAM;MACT;MACAA,UAAU,CAACC,IAAI,CAACP,8BAA8B,EAAEE,cAAc,CAAC;MAC/DF,8BAA8B,CAACQ,mBAAmB,CAAC,OAAO,EAAEH,kBAAkB,CAAC;IACnF,CAAC;EACL,CAAC,EAAEL,8BAA8B,CAACM,UAAU,CAAC;EAC7CN,8BAA8B,CAACS,gBAAgB,CAAC,OAAO,EAAEJ,kBAAkB,CAAC;EAC5EP,oBAAoB,CAACE,8BAA8B,EAAEE,cAAc,CAAC;EACpEF,8BAA8B,CAACU,IAAI,GAAG,CAAEA,IAAI,IAAK;IAC7C,IAAIC,SAAS,GAAG,KAAK;IACrB,OAAO,CAACC,IAAI,GAAG,CAAC,KAAK;MACjB,IAAID,SAAS,EAAE;QACX,IAAI;UACAD,IAAI,CAACH,IAAI,CAACP,8BAA8B,EAAEY,IAAI,CAAC;QACnD,CAAC,CACD,MAAM;UACFV,cAAc,CAACW,IAAI,CAACC,cAAc,CAAC,CAAC,EAAEF,IAAI,CAAC;QAC/C;MACJ,CAAC,MACI;QACDF,IAAI,CAACH,IAAI,CAACP,8BAA8B,EAAEY,IAAI,CAAC;QAC/CD,SAAS,GAAG,IAAI;MACpB;IACJ,CAAC;EACL,CAAC,EAAEX,8BAA8B,CAACU,IAAI,CAAC;AAC3C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}